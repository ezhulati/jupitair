{
  "version": 3,
  "sources": ["../../@cloudinary/transformation-builder-sdk/qualifiers/flag/FlagQualifier.js", "../../@cloudinary/transformation-builder-sdk/internal/utils/dataStructureUtils.js", "../../@cloudinary/transformation-builder-sdk/internal/models/actionToJson.js", "../../@cloudinary/transformation-builder-sdk/internal/models/ActionModel.js", "../../@cloudinary/transformation-builder-sdk/internal/Action.js", "../../@cloudinary/transformation-builder-sdk/qualifiers/region/NamedRegion.js", "../../@cloudinary/transformation-builder-sdk/qualifiers/region/CustomRegion.js", "../../@cloudinary/transformation-builder-sdk/qualifiers/region/RectangleRegion.js", "../../@cloudinary/transformation-builder-sdk/qualifiers/region.js", "../../@cloudinary/transformation-builder-sdk/actions/effect/Blur.js", "../../@cloudinary/transformation-builder-sdk/actions/effect/leveled/Accelerate.js", "../../@cloudinary/transformation-builder-sdk/internal/utils/objectFlip.js", "../../@cloudinary/transformation-builder-sdk/internal/internalConstants.js", "../../@cloudinary/transformation-builder-sdk/actions/effect/EffectActions/SimpleEffectAction.js", "../../@cloudinary/transformation-builder-sdk/actions/effect/EffectActions/LeveledEffectAction.js", "../../@cloudinary/transformation-builder-sdk/actions/effect/leveled/Loop.js", "../../@cloudinary/transformation-builder-sdk/actions/effect/Cartoonify.js", "../../@cloudinary/transformation-builder-sdk/internal/utils/prepareColor.js", "../../@cloudinary/transformation-builder-sdk/actions/effect/Outline.js", "../../@cloudinary/transformation-builder-sdk/actions/effect/leveled/MakeTransparent.js", "../../@cloudinary/transformation-builder-sdk/actions/effect/Vectorize.js", "../../@cloudinary/transformation-builder-sdk/actions/effect/SimulateColorBlind.js", "../../@cloudinary/transformation-builder-sdk/actions/effect/EffectActions/EffectActionWithLevel.js", "../../@cloudinary/transformation-builder-sdk/actions/effect/AssistColorBlind.js", "../../@cloudinary/transformation-builder-sdk/actions/effect/GradientFade.js", "../../@cloudinary/transformation-builder-sdk/actions/effect/leveled/FadeOut.js", "../../@cloudinary/transformation-builder-sdk/actions/effect/Colorize.js", "../../@cloudinary/transformation-builder-sdk/actions/effect/Shadow.js", "../../@cloudinary/transformation-builder-sdk/actions/effect/StyleTransfer.js", "../../@cloudinary/transformation-builder-sdk/actions/effect/Dither.js", "../../@cloudinary/transformation-builder-sdk/actions/effect/leveled/Deshake.js", "../../@cloudinary/transformation-builder-sdk/actions/effect/pixelate/Pixelate.js", "../../@cloudinary/transformation-builder-sdk/actions/effect/EffectActions/EffectActionWithStrength.js", "../../@cloudinary/transformation-builder-sdk/actions/effect/leveled/Blackwhite.js", "../../@cloudinary/transformation-builder-sdk/actions/effect/leveled/FadeIn.js", "../../@cloudinary/transformation-builder-sdk/actions/effect/RemoveBackgroundAction.js", "../../@cloudinary/transformation-builder-sdk/actions/effect/Theme.js", "../../@cloudinary/transformation-builder-sdk/actions/effect/BackgroundRemoval.js", "../../@cloudinary/transformation-builder-sdk/actions/effect/DropShadow.js", "../../@cloudinary/transformation-builder-sdk/actions/effect/GenerativeRemove.js", "../../@cloudinary/transformation-builder-sdk/actions/effect/GenerativeReplace.js", "../../@cloudinary/transformation-builder-sdk/actions/effect/GenerativeRecolor.js", "../../@cloudinary/transformation-builder-sdk/internal/utils/encodePromptComponents.js", "../../@cloudinary/transformation-builder-sdk/actions/effect/GenerativeBackgroundReplace.js", "../../@cloudinary/transformation-builder-sdk/actions/effect/Extract.js", "../../@cloudinary/transformation-builder-sdk/actions/reshape/TrimAction.js", "../../@cloudinary/transformation-builder-sdk/actions/effect.js"],
  "sourcesContent": ["import { QualifierValue } from \"../../internal/qualifier/QualifierValue.js\";\nimport { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\n/**\n * @memberOf Qualifiers.Flag\n * @extends {SDK.Qualifier}\n * @description the FlagQualifier class\n */\nclass FlagQualifier extends Qualifier {\n    constructor(flagType, flagValue) {\n        let qualifierValue;\n        if (flagValue) {\n            qualifierValue = new QualifierValue([flagType, `${flagValue}`]).setDelimiter(':');\n        }\n        else {\n            qualifierValue = flagType;\n        }\n        super('fl', qualifierValue);\n        this.flagValue = flagValue;\n    }\n    toString() {\n        return super.toString().replace(/\\./g, '%2E');\n    }\n    getFlagValue() {\n        return this.flagValue;\n    }\n}\nexport { FlagQualifier };\n", "/**\n * Sort a map by key\n * @private\n * @param map <string, any>\n * @Return array of map's values sorted by key\n */\nfunction mapToSortedArray(map, flags) {\n    const array = Array.from(map.entries());\n    // objects from the Array.from() method above are stored in array of arrays:\n    // [[qualifierKey, QualifierObj], [qualifierKey, QualifierObj]]\n    // Flags is an array of FlagQualifierObj\n    // We need to convert it to the same form: [flagQualifier] =>  ['fl', flagQualifier]\n    flags.forEach((flag) => {\n        array.push(['fl', flag]); // push ['fl', flagQualifier]\n    });\n    return array.sort().map((v) => v[1]);\n}\n/**\n * Checks if `value` is a string.\n * @private\n * @param {*} value The value to check.\n * @return {boolean} `true` if `value` is a string, else `false`.\n */\nfunction isString(value) {\n    return (typeof value === 'string' || value instanceof String);\n}\nexport { isString, mapToSortedArray };\n", "import { createUnsupportedError } from \"../utils/unsupportedError.js\";\n/**\n * Returns the action's model\n */\nexport function actionToJson() {\n    var _a, _b, _c;\n    const actionModelIsNotEmpty = this._actionModel && Object.keys(this._actionModel).length;\n    const sourceTransformationError = (_c = (_b = (_a = this._actionModel) === null || _a === void 0 ? void 0 : _a.source) === null || _b === void 0 ? void 0 : _b.transformation) === null || _c === void 0 ? void 0 : _c.error;\n    // Should return error when there is unsupported transformation inside\n    if (sourceTransformationError && sourceTransformationError instanceof Error) {\n        return { error: sourceTransformationError };\n    }\n    if (actionModelIsNotEmpty) {\n        return this._actionModel;\n    }\n    return { error: createUnsupportedError(`unsupported action ${this.constructor.name}`) };\n}\n", "import { actionToJson } from \"./actionToJson.js\";\nexport class ActionModel {\n    constructor() {\n        this._actionModel = {};\n    }\n    toJson() {\n        return actionToJson.apply(this);\n    }\n}\n", "import { FlagQualifier } from \"../qualifiers/flag/FlagQualifier.js\";\nimport { Qualifier } from \"./qualifier/Qualifier.js\";\nimport { mapToSortedArray } from \"./utils/dataStructureUtils.js\";\nimport { ActionModel } from \"./models/ActionModel.js\";\n/**\n * @summary SDK\n * @memberOf SDK\n * @description Defines the category of transformation to perform.\n */\nclass Action extends ActionModel {\n    constructor() {\n        super(...arguments);\n        // We're using map, to overwrite existing keys. for example:\n        // addParam(w_100).addQualifier(w_200) should result in w_200. and not w_100,w_200\n        this.qualifiers = new Map();\n        // Unlike regular qualifiers, there can be multiple flags in each url component /fl_1,fl_2/\n        // If the falgs are added to the qualifiers map, only a single flag could exist in a component (it's a map)\n        // So flags are stored separately until the very end because of that reason\n        this.flags = [];\n        this.delimiter = ','; // {qualifier}{delimiter}{qualifier} for example: `${'w_100'}${','}${'c_fill'}`\n        this.actionTag = ''; // A custom name tag to identify this action in the future\n    }\n    prepareQualifiers() { }\n    /**\n     * @description Returns the custom name tag that was given to this action\n     * @return {string}\n     */\n    getActionTag() {\n        return this.actionTag;\n    }\n    /**\n     * @description Sets the custom name tag for this action\n     * @return {this}\n     */\n    setActionTag(tag) {\n        this.actionTag = tag;\n        return this;\n    }\n    /**\n     * @description Calls toString() on all child qualifiers (implicitly by using .join()).\n     * @return {string}\n     */\n    toString() {\n        this.prepareQualifiers();\n        return mapToSortedArray(this.qualifiers, this.flags).join(this.delimiter);\n    }\n    /**\n     * @description Adds the parameter to the action.\n     * @param {SDK.Qualifier} qualifier\n     * @return {this}\n     */\n    addQualifier(qualifier) {\n        // if string, find the key and value\n        if (typeof qualifier === 'string') {\n            const [key, value] = qualifier.toLowerCase().split('_');\n            if (key === 'fl') {\n                // if string qualifier is a flag, store it in the flags arrays\n                this.flags.push(new FlagQualifier(value));\n            }\n            else {\n                // if the string qualifier is not a flag, create a new qualifier from it\n                this.qualifiers.set(key, new Qualifier(key, value));\n            }\n        }\n        else {\n            // if a qualifier object, insert to the qualifiers map\n            this.qualifiers.set(qualifier.key, qualifier);\n        }\n        return this;\n    }\n    /**\n     * @description Adds a flag to the current action.\n     * @param {Qualifiers.Flag} flag\n     * @return {this}\n     */\n    addFlag(flag) {\n        if (typeof flag === 'string') {\n            this.flags.push(new FlagQualifier(flag));\n        }\n        else {\n            if (flag instanceof FlagQualifier) {\n                this.flags.push(flag);\n            }\n        }\n        return this;\n    }\n    addValueToQualifier(qualifierKey, qualifierValue) {\n        this.qualifiers.get(qualifierKey).addValue(qualifierValue);\n        return this;\n    }\n}\nexport { Action };\n", "import { Action } from \"../../internal/Action.js\";\n/**\n * @memberOf Qualifiers.Region\n */\nclass NamedRegion extends Action {\n    constructor(type) {\n        super();\n        this.regionType = type;\n        this._actionModel.regionType = type;\n    }\n}\nexport { NamedRegion };\n", "import { NamedRegion } from \"./NamedRegion.js\";\nimport { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\n/**\n * @memberOf Qualifiers.Region\n */\nclass CustomRegion extends NamedRegion {\n    constructor() {\n        super('custom');\n    }\n    /**\n     * @description The x position in pixels.\n     * @param {number | string} x\n     */\n    x(x) {\n        this._actionModel.x = x;\n        this.addQualifier(new Qualifier('x', x));\n        return this;\n    }\n    /**\n     * @description The y position in pixels.\n     * @param {number | string} y\n     */\n    y(y) {\n        this._actionModel.y = y;\n        this.addQualifier(new Qualifier('y', y));\n        return this;\n    }\n    /**\n     * @description The width of the region in pixels.\n     * @param {number | string} width\n     */\n    width(width) {\n        this._actionModel.width = width;\n        this.addQualifier(new Qualifier('w', width));\n        return this;\n    }\n    /**\n     * @description The height of the region in pixels.\n     * @param {number | string} height\n     */\n    height(height) {\n        this._actionModel.height = height;\n        this.addQualifier(new Qualifier('h', height));\n        return this;\n    }\n    static fromJson(model) {\n        const customRegion = new CustomRegion();\n        if (model.width) {\n            customRegion.width(model.width);\n        }\n        if (model.height) {\n            customRegion.height(model.height);\n        }\n        if (model.x) {\n            customRegion.x(model.x);\n        }\n        if (model.y) {\n            customRegion.y(model.y);\n        }\n        return customRegion;\n    }\n}\nexport { CustomRegion };\n", "import { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\nimport { Action } from \"../../internal/Action.js\";\n/**\n * @memberOf Qualifiers.Region\n */\nclass RectangleRegion extends Action {\n    /**\n     * Rectangle defines a region where action will be applied\n     *\n     * @param {number} x The x position in pixels\n     * @param {number} y The y position in pixels\n     * @param {number} width The width in pixels\n     * @param {number} height The height in pixels\n     */\n    constructor(x, y, width, height) {\n        super();\n        this.addQualifier(new Qualifier(\"x\", x));\n        this.addQualifier(new Qualifier(\"y\", y));\n        this.addQualifier(new Qualifier(\"w\", width));\n        this.addQualifier(new Qualifier(\"h\", height));\n        this._actionModel = {\n            x,\n            y,\n            width,\n            height,\n        };\n    }\n    toString() {\n        const { x, y, width, height } = this._actionModel;\n        return `(x_${x};y_${y};w_${width};h_${height})`;\n    }\n}\nexport { RectangleRegion };\n", "import { CustomRegion } from \"./region/CustomRegion.js\";\nimport { NamedRegion } from \"./region/NamedRegion.js\";\nimport { RectangleRegion } from \"./region/RectangleRegion.js\";\n/**\n * @summary qualifier\n * @memberOf Qualifiers.Region\n * @return {Qualifiers.Region.CustomRegion}\n */\nfunction custom() {\n    return new CustomRegion();\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.Region\n * @return {Qualifiers.Region.NamedRegion}\n */\nfunction faces() {\n    return new NamedRegion(\"faces\");\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.Region\n * @return {Qualifiers.Region.NamedRegion}\n */\nfunction ocr() {\n    return new NamedRegion(\"ocr_text\");\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.Region\n * @return {Qualifiers.Region.RectangleRegion}\n */\nfunction rectangle(x, y, width, height) {\n    return new RectangleRegion(x, y, width, height);\n}\n/**\n * @description Contains functions to select the type of region, used with Effect.blur() and Effect.pixelate().\n * <b>See also</b>: {@link Actions.Effect.BlurAction|Blur Action}\n * <b>See also</b>: {@link Actions.Effect.Pixelate|Blur Action}\n * <b>See also</b>: {@link Actions.Effect|Possible effects}\n * @namespace Region\n * @memberOf Qualifiers\n */\nconst Region = { ocr, faces, custom, rectangle };\nexport { Region, ocr, faces, custom, rectangle };\n", "import { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\nimport { Action } from \"../../internal/Action.js\";\nimport { faces, ocr } from \"../../qualifiers/region.js\";\nimport { CustomRegion } from \"../../qualifiers/region/CustomRegion.js\";\n/**\n * @description The Action class of the blur Builder.\n * @extends SDK.Action\n * @memberOf Actions.Effect\n * @see Visit {@link Actions.Effect|Effect} for an example\n */\nclass BlurAction extends Action {\n    constructor(strength) {\n        super();\n        this._actionModel = {};\n        this._strength = strength;\n        this._actionModel.actionType = 'blur';\n        this._actionModel.strength = strength;\n    }\n    /**\n     * @description Specifies the region to blur.\n     * @param {NamedRegion} blurRegion\n     */\n    region(blurRegion) {\n        this._region = blurRegion;\n        this._actionModel.region = blurRegion.toJson();\n        return this;\n    }\n    /**\n     * @description Sets the strength of the blur effect.\n     * @param {number | string} strength\n     */\n    strength(strength) {\n        this._strength = strength;\n        this._actionModel.strength = strength;\n        return this;\n    }\n    prepareQualifiers() {\n        /*\n         * Blur with region is a unique object in this codebase.\n         * On top of Blur being an Action with Qualifiers,\n         * it also accepts a Qualifier called Region.\n         *\n         * This Qualifier is in itself composite of qualifiers (such as height, or width).\n         * The existence of Region changes the output of Blur in non traditional ways\n         * which forced this relatively ad-hoc implementation.\n         *\n         * Aside from all of that, all of the Qualifiers in the component should be alphabetized\n         * This happens naturally in the Action class,\n         * however since we're dealing with two levels of qualifiers (Blur and Region),\n         * these need to be merged.\n         *\n         * This function will merge the Region qualifiers with Blur\n         * and add all needed implicit qualifiers (like g_ocr_text).\n         * We're not using the full Gravity Qualifier here to prevent the code import for such a simplistic case\n         */\n        const strength = this._strength ? `:${this._strength}` : '';\n        if ('_region' in this) {\n            const qualifiers = this._region.qualifiers;\n            // Copy qualifiers from the region \"action\" to the blur action\n            qualifiers.forEach((q) => this.addQualifier(q));\n            if (this._region.regionType === 'custom') {\n                this.addQualifier(new Qualifier('e', `blur_region${strength}`));\n            }\n            if (this._region.regionType === 'ocr_text') {\n                this.addQualifier(new Qualifier('e', `blur_region${strength}`));\n                this.addQualifier(new Qualifier('g', `ocr_text`));\n            }\n            if (this._region.regionType === 'faces') {\n                this.addQualifier(new Qualifier('e', `blur_faces${strength}`));\n            }\n        }\n        else {\n            this.addQualifier(new Qualifier('e', `blur${strength}`));\n        }\n    }\n    static fromJson(actionModel) {\n        const { strength, region } = actionModel;\n        // We are using this() to allow inheriting classes to use super.fromJson.apply(this, [actionModel])\n        // This allows the inheriting classes to determine the class to be created\n        const result = new this(strength);\n        strength && result.strength(strength);\n        if (region && region.regionType === 'faces') {\n            result.region(faces());\n        }\n        if (region && region.regionType === 'ocr_text') {\n            result.region(ocr());\n        }\n        if (region && region.regionType === 'custom') {\n            result.region(CustomRegion.fromJson(region));\n        }\n        return result;\n    }\n}\nexport { BlurAction };\n", "import { Action } from \"../../../internal/Action.js\";\nimport { Qualifier } from \"../../../internal/qualifier/Qualifier.js\";\nimport { QualifierValue } from \"../../../internal/qualifier/QualifierValue.js\";\n/**\n * @description Changes the speed of the video playback using the rate() method\n * @memberOf Actions.Effect\n * @see Visit {@link Actions.Effect|Effect} for an example\n */\nclass AccelerationEffectAction extends Action {\n    constructor(rate) {\n        super();\n        this._actionModel = { actionType: 'accelerate' };\n        rate && this.rate(rate);\n    }\n    rate(rate) {\n        this._actionModel.rate = rate;\n        this._rate = rate;\n        return this;\n    }\n    prepareQualifiers() {\n        const qualifierValue = new QualifierValue(['accelerate', this._rate]).setDelimiter(':');\n        this.addQualifier(new Qualifier('e', qualifierValue));\n        return this;\n    }\n    static fromJson(actionModel) {\n        const { rate } = actionModel;\n        // We are using this() to allow inheriting classes to use super.fromJson.apply(this, [actionModel])\n        // This allows the inheriting classes to determine the class to be created\n        // @ts-ignore\n        const result = new this();\n        rate && result.rate(rate);\n        return result;\n    }\n}\nexport { AccelerationEffectAction };\n", "/**\n * Flip keys and values for given object\n * @param obj\n */\nfunction objectFlip(obj) {\n    const result = {};\n    Object.keys(obj).forEach((key) => {\n        result[obj[key]] = key;\n    });\n    return result;\n}\nexport { objectFlip };\n", "/**\n * This file is for internal constants only.\n * It is not intended for public use and is not part of the public API\n */\nimport { objectFlip } from \"./utils/objectFlip.js\";\nexport const CONDITIONAL_OPERATORS = {\n    \"=\": \"eq\",\n    \"!=\": \"ne\",\n    \"<\": \"lt\",\n    \">\": \"gt\",\n    \"<=\": \"lte\",\n    \">=\": \"gte\",\n    \"&&\": \"and\",\n    \"||\": \"or\",\n    \"*\": \"mul\",\n    \"/\": \"div\",\n    \"+\": \"add\",\n    \"-\": \"sub\",\n    \"^\": \"pow\"\n};\nexport const RESERVED_NAMES = {\n    \"aspect_ratio\": \"ar\",\n    \"aspectRatio\": \"ar\",\n    \"current_page\": \"cp\",\n    \"currentPage\": \"cp\",\n    \"duration\": \"du\",\n    \"face_count\": \"fc\",\n    \"faceCount\": \"fc\",\n    \"height\": \"h\",\n    \"initial_aspect_ratio\": \"iar\",\n    \"initial_height\": \"ih\",\n    \"initial_width\": \"iw\",\n    \"initialAspectRatio\": \"iar\",\n    \"initialHeight\": \"ih\",\n    \"initialWidth\": \"iw\",\n    \"initial_duration\": \"idu\",\n    \"initialDuration\": \"idu\",\n    \"page_count\": \"pc\",\n    \"page_x\": \"px\",\n    \"page_y\": \"py\",\n    \"pageCount\": \"pc\",\n    \"pageX\": \"px\",\n    \"pageY\": \"py\",\n    \"tags\": \"tags\",\n    \"width\": \"w\",\n    \"trimmed_aspect_ratio\": \"tar\",\n    \"current_public_id\": \"cpi\",\n    \"initial_density\": \"idn\",\n    \"page_names\": \"pgnames\"\n};\nexport const ACTION_TYPE_TO_CROP_MODE_MAP = {\n    limitFit: 'limit',\n    limitFill: 'lfill',\n    minimumFit: 'mfit',\n    thumbnail: 'thumb',\n    limitPad: 'lpad',\n    minimumPad: 'mpad',\n    autoPad: 'auto_pad'\n};\nexport const ACTION_TYPE_TO_DELIVERY_MODE_MAP = {\n    colorSpace: 'cs',\n    dpr: 'dpr',\n    density: 'dn',\n    defaultImage: 'd',\n    format: 'f',\n    quality: 'q'\n};\nexport const ACTION_TYPE_TO_EFFECT_MODE_MAP = {\n    redEye: 'redeye',\n    advancedRedEye: 'adv_redeye',\n    oilPaint: 'oil_paint',\n    unsharpMask: 'unsharp_mask',\n    makeTransparent: 'make_transparent',\n    generativeRestore: 'gen_restore',\n    upscale: 'upscale'\n};\nexport const ACTION_TYPE_TO_QUALITY_MODE_MAP = {\n    autoBest: 'auto:best',\n    autoEco: 'auto:eco',\n    autoGood: 'auto:good',\n    autoLow: 'auto:low',\n    jpegminiHigh: 'jpegmini:1',\n    jpegminiMedium: 'jpegmini:2',\n    jpegminiBest: 'jpegmini:0'\n};\nexport const ACTION_TYPE_TO_STREAMING_PROFILE_MODE_MAP = {\n    fullHd: 'full_hd',\n    fullHdWifi: 'full_hd_wifi',\n    fullHdLean: 'full_hd_lean',\n    hdLean: 'hd_lean'\n};\nexport const CHROMA_VALUE_TO_CHROMA_MODEL_ENUM = {\n    444: \"CHROMA_444\",\n    420: \"CHROMA_420\"\n};\nexport const COLOR_SPACE_MODEL_MODE_TO_COLOR_SPACE_MODE_MAP = {\n    'noCmyk': 'no_cmyk',\n    'keepCmyk': 'keep_cmyk',\n    'tinySrgb': 'tinysrgb',\n    'srgbTrueColor': 'srgb:truecolor'\n};\nexport const ACTION_TYPE_TO_BLEND_MODE_MAP = {\n    'antiRemoval': 'anti_removal'\n};\nexport const CHROMA_MODEL_ENUM_TO_CHROMA_VALUE = objectFlip(CHROMA_VALUE_TO_CHROMA_MODEL_ENUM);\nexport const COLOR_SPACE_MODE_TO_COLOR_SPACE_MODEL_MODE_MAP = objectFlip(COLOR_SPACE_MODEL_MODE_TO_COLOR_SPACE_MODE_MAP);\nexport const CROP_MODE_TO_ACTION_TYPE_MAP = objectFlip(ACTION_TYPE_TO_CROP_MODE_MAP);\nexport const DELIVERY_MODE_TO_ACTION_TYPE_MAP = objectFlip(ACTION_TYPE_TO_DELIVERY_MODE_MAP);\nexport const EFFECT_MODE_TO_ACTION_TYPE_MAP = objectFlip(ACTION_TYPE_TO_EFFECT_MODE_MAP);\nexport const QUALITY_MODE_TO_ACTION_TYPE_MAP = objectFlip(ACTION_TYPE_TO_QUALITY_MODE_MAP);\nexport const STREAMING_PROFILE_TO_ACTION_TYPE_MAP = objectFlip(ACTION_TYPE_TO_STREAMING_PROFILE_MODE_MAP);\n", "import { Action } from \"../../../internal/Action.js\";\nimport { QualifierValue } from \"../../../internal/qualifier/QualifierValue.js\";\nimport { Qualifier } from \"../../../internal/qualifier/Qualifier.js\";\nimport { ACTION_TYPE_TO_EFFECT_MODE_MAP, EFFECT_MODE_TO_ACTION_TYPE_MAP } from \"../../../internal/internalConstants.js\";\n/**\n * @description A class that defines a simple effect of the type e_{effectName}\n * @extends SDK.Action\n * @memberOf Actions.Effect\n * @see Visit {@link Actions.Effect|Effect} for an example\n */\nclass SimpleEffectAction extends Action {\n    constructor(effectType, level) {\n        super();\n        this._actionModel = {};\n        this._actionModel.actionType = EFFECT_MODE_TO_ACTION_TYPE_MAP[effectType] || effectType;\n        const qualifierEffect = this.createEffectQualifier(effectType, level);\n        this.addQualifier(qualifierEffect);\n    }\n    createEffectQualifier(effectType, level) {\n        let qualifierValue;\n        if (level) {\n            qualifierValue = new QualifierValue([effectType, `${level}`]).setDelimiter(':');\n        }\n        else {\n            qualifierValue = new QualifierValue(effectType);\n        }\n        return new Qualifier('e', qualifierValue);\n    }\n    static fromJson(actionModel) {\n        const { actionType, level, strength } = actionModel;\n        const effectType = ACTION_TYPE_TO_EFFECT_MODE_MAP[actionType] || actionType;\n        // We are using this() to allow inheriting classes to use super.fromJson.apply(this, [actionModel])\n        // This allows the inheriting classes to determine the class to be created\n        // @ts-ignore\n        const result = new this(effectType, level ? level : strength);\n        return result;\n    }\n}\nexport { SimpleEffectAction };\n", "import { SimpleEffectAction } from \"./SimpleEffectAction.js\";\nimport { EFFECT_MODE_TO_ACTION_TYPE_MAP } from \"../../../internal/internalConstants.js\";\n/**\n * @description A base class for effects with a level, the extending class needs to implement a method that calls setLevel()\n * @extends {Actions.Effect.SimpleEffectAction}\n * @memberOf Actions.Effect\n * @see Visit {@link Actions.Effect|Effect} for an example\n */\nclass LeveledEffectAction extends SimpleEffectAction {\n    constructor(effectType, level) {\n        super(effectType, level);\n        this.LEVEL_NAME = 'level';\n        this._actionModel = {};\n        this.effectType = effectType;\n        this._actionModel.actionType = EFFECT_MODE_TO_ACTION_TYPE_MAP[effectType] || effectType;\n        if (level) {\n            this.setLevel(level);\n        }\n    }\n    /**\n     *\n     * @description Sets the effect level for the action\n     * @param {string | number} level - The strength of the effect\n     * @protected\n     */\n    setLevel(level) {\n        this._actionModel[this.LEVEL_NAME] = level;\n        const qualifierEffect = this.createEffectQualifier(this.effectType, level);\n        this.addQualifier(qualifierEffect);\n        return this;\n    }\n}\nexport { LeveledEffectAction };\n", "import { LeveledEffectAction } from \"../EffectActions/LeveledEffectAction.js\";\n/**\n * @description Delivers a video or animated GIF that contains additional loops of the video/GIF.\n * @extends LeveledEffectAction\n * @memberOf Actions.Effect\n * @see Visit {@link Actions.Effect|Effect} for an example\n */\nclass LoopEffectAction extends LeveledEffectAction {\n    additionalIterations(value) {\n        this._actionModel.iterations = value;\n        const qualifierEffect = this.createEffectQualifier(this.effectType, value);\n        this.addQualifier(qualifierEffect);\n        return this;\n    }\n    static fromJson(actionModel) {\n        const { actionType, iterations } = (actionModel);\n        // We are using this() to allow inheriting classes to use super.fromJson.apply(this, [actionModel])\n        // This allows the inheriting classes to determine the class to be created\n        const result = new this(actionType, iterations);\n        return result;\n    }\n}\nexport { LoopEffectAction };\n", "import { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\nimport { QualifierValue } from \"../../internal/qualifier/QualifierValue.js\";\nimport { Action } from \"../../internal/Action.js\";\n/**\n * @description Applies a cartoon effect to an image.\n * @extends SDK.Action\n * @memberOf Actions.Effect\n * @see Visit {@link Actions.Effect|Effect} for an example\n */\nclass CartoonifyEffect extends Action {\n    constructor(effectName, strength) {\n        // We don't pass level in the constructor, we'll build it in the prepareParam\n        super();\n        this._actionModel = {};\n        this.cartoonifyStrength = strength;\n        this.effectName = effectName;\n        this._actionModel.actionType = effectName;\n    }\n    /**\n     * @description Sets the thickness of the lines.\n     * @param {number} lineStrength The thickness of the lines. (Range: 0 to 100, Server default: 50)\n     * @return {this}\n     */\n    lineStrength(lineStrength) {\n        this.cartoonifyStrength = lineStrength;\n        this._actionModel.lineStrength = lineStrength;\n        return this;\n    }\n    /**\n     * @description Achieves a black and white cartoon effect.\n     * @return {this}\n     */\n    blackwhite() {\n        this._actionModel.blackAndWhite = true;\n        this.colorReduction = 'bw';\n        return this;\n    }\n    /**\n     * @description\n     * Sets the decrease in the number of colors and corresponding saturation boost of the remaining colors. <br/>\n     * Higher reduction values result in a less realistic look.\n     * @param {number } level The decrease in the number of colors and corresponding saturation boost of the remaining colors. (Range: 0 to 100, Server default: automatically adjusts according to the line_strength value). Set to 'bw' for a black and white cartoon effect.\n     * @return {this}\n     */\n    colorReductionLevel(level) {\n        this._actionModel.colorReductionLevel = level;\n        this.colorReduction = level;\n        return this;\n    }\n    prepareQualifiers() {\n        this.addQualifier(new Qualifier('e', new QualifierValue([this.effectName, this.cartoonifyStrength, this.colorReduction])));\n        return;\n    }\n    static fromJson(actionModel) {\n        const { actionType, lineStrength, blackAndWhite, colorReductionLevel } = actionModel;\n        // We are using this() to allow inheriting classes to use super.fromJson.apply(this, [actionModel])\n        // This allows the inheriting classes to determine the class to be created\n        const result = new this(actionType, lineStrength);\n        blackAndWhite && result.blackwhite();\n        colorReductionLevel && result.colorReductionLevel(colorReductionLevel);\n        lineStrength && result.lineStrength(lineStrength);\n        return result;\n    }\n}\nexport { CartoonifyEffect };\n", "/**\n * Returns RGB or Color\n * @private\n * @param color\n */\nexport function prepareColor(color) {\n    if (color) {\n        return color.match(/^#/) ? `rgb:${color.substr(1)}` : color;\n    }\n    else {\n        return color;\n    }\n}\n", "import { Action } from \"../../internal/Action.js\";\nimport { QualifierValue } from \"../../internal/qualifier/QualifierValue.js\";\nimport { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\nimport { prepareColor } from \"../../internal/utils/prepareColor.js\";\n/**\n * @description Adds an outline to a transparent image. For examples, see the Image Transformations guide.\n * @extends SDK.Action\n * @memberOf Actions.Effect\n * @see Visit {@link Actions.Effect|Effect} for an example\n */\nclass EffectOutline extends Action {\n    constructor() {\n        super();\n        this._actionModel = {};\n        this._actionModel.actionType = 'outline';\n    }\n    /**\n     * @description\n     * How to apply the outline effect which can be one of the following values:\n     * inner, inner_fill, outer, fill.\n     * @param {OutlineModeType|string} mode  The type of outline effect. Use the constants defined in Outline.\n     * @return {this}\n     */\n    mode(mode) {\n        this._actionModel.mode = mode;\n        this._mode = mode;\n        return this;\n    }\n    /**\n     * The thickness of the outline in pixels. (Range: 1 to 100, Server default: 5)\n     * @param {number} width\n     * @return {this}\n     */\n    width(width) {\n        this._actionModel.width = width;\n        this._width = width;\n        return this;\n    }\n    /**\n     * @description\n     * The level of blur of the outline.\n     * Range: 0 to 2000, Server default: 0\n     * @param {number | string} lvl\n     * @return {this}\n     */\n    blurLevel(lvl) {\n        this._actionModel.blurLevel = lvl;\n        this._blurLevel = lvl;\n        return this;\n    }\n    /**\n     * @param {string | Qualifiers.Color} color One of the SDK Color values, string, or rgba: '#fff'\n     * @return {this}\n     */\n    color(color) {\n        this._actionModel.color = color;\n        return this.addQualifier(new Qualifier('co', prepareColor(color)));\n    }\n    prepareQualifiers() {\n        this.addQualifier(new Qualifier('e', new QualifierValue(['outline', this._mode, this._width, this._blurLevel]).setDelimiter(':')));\n    }\n    static fromJson(actionModel) {\n        const { actionType, mode, color, blurLevel, width } = actionModel;\n        // We are using this() to allow inheriting classes to use super.fromJson.apply(this, [actionModel])\n        // This allows the inheriting classes to determine the class to be created\n        const result = new this();\n        mode && result.mode(mode);\n        color && result.color(color);\n        blurLevel && result.blurLevel(blurLevel);\n        width && result.width(width);\n        return result;\n    }\n}\nexport { EffectOutline };\n", "import { LeveledEffectAction } from \"../EffectActions/LeveledEffectAction.js\";\nimport { Qualifier } from \"../../../internal/qualifier/Qualifier.js\";\nimport { QualifierValue } from \"../../../internal/qualifier/QualifierValue.js\";\nimport { prepareColor } from \"../../../internal/utils/prepareColor.js\";\nimport { ACTION_TYPE_TO_EFFECT_MODE_MAP } from \"../../../internal/internalConstants.js\";\n/**\n * @description Makes the background of the image transparent (or solid white for formats that do not support transparency).\n * @extends LeveledEffectAction\n * @memberOf Actions.Effect\n * @see Visit {@link Actions.Effect|Effect} for an example\n */\nclass MakeTransparentEffectAction extends LeveledEffectAction {\n    constructor() {\n        super(...arguments);\n        this._actionModel = { actionType: 'makeTransparent' };\n    }\n    /**\n     * @description Sets the tolerance used to accommodate variance in the background color.\n     * @param {number | string} value The tolerance used to accommodate variance in the background color. (Range: 0 to 100, Server default: 10)\n     */\n    tolerance(value) {\n        this._actionModel.tolerance = value;\n        const qualifierEffect = this.createEffectQualifier(this.effectType, value);\n        this.addQualifier(qualifierEffect);\n        return this;\n    }\n    /**\n     * @description Sets the color to make transparent.\n     * @param {string} color The HTML name of the color (red, green, etc.) or RGB hex code.\n     * @return {this}\n     */\n    colorToReplace(color) {\n        this._actionModel.color = color;\n        return this.addQualifier(new Qualifier('co', new QualifierValue(prepareColor(color))));\n    }\n    static fromJson(actionModel) {\n        const { actionType, tolerance, color } = actionModel;\n        // We are using this() to allow inheriting classes to use super.fromJson.apply(this, [actionModel])\n        // This allows the inheriting classes to determine the class to be created\n        const result = new this(ACTION_TYPE_TO_EFFECT_MODE_MAP[actionType], tolerance);\n        tolerance && result.tolerance(tolerance);\n        color && result.colorToReplace(color);\n        return result;\n    }\n}\nexport { MakeTransparentEffectAction };\n", "import { Action } from \"../../internal/Action.js\";\nimport { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\nimport { QualifierValue } from \"../../internal/qualifier/QualifierValue.js\";\n/**\n * @description Vectorizes the image.\n * @extends SDK.Action\n * @memberOf Actions.Effect\n * @see Visit {@link Actions.Effect|Effect} for an example\n */\nclass VectorizeEffectAction extends Action {\n    constructor() {\n        super();\n        this._actionModel = {};\n        this._actionModel.actionType = 'vectorize';\n    }\n    /**\n     * @description The number of colors. (Range: 2 to 30, Server default: 10)\n     * @param {number | string} num\n     * @return {this}\n     */\n    numOfColors(num) {\n        this._actionModel.numOfColors = num;\n        this._numOfColors = num;\n        return this;\n    }\n    /**\n     * @description The level of detail. Specify either a percentage of the original image (Range: 0.0 to 1.0) or an absolute number of pixels (Range: 0 to 1000). (Server default: 300)\n     * @param {number | string} num\n     * @return {this}\n     */\n    detailsLevel(num) {\n        this._actionModel.detailLevel = num;\n        this._detailsLevel = num;\n        return this;\n    }\n    /**\n     * @description The size of speckles to suppress. Specify either a percentage of the original image (Range: 0.0 to 1.0) or an absolute number of pixels (Range: 0 to 100, Server default: 2)\n     * @param {number | string} num\n     * @return {this}\n     */\n    despeckleLevel(num) {\n        this._actionModel.despeckleLevel = num;\n        this._despeckleLevel = num;\n        return this;\n    }\n    /**\n     * @description The corner threshold. Specify 100 for no smoothing (polygon corners), 0 for completely smooth corners. (Range: 0 to 100, Default: 25)\n     * @param {number | string} num\n     * @return {this}\n     */\n    cornersLevel(num) {\n        this._actionModel.cornersLevel = num;\n        this._cornersLevel = num;\n        return this;\n    }\n    /**\n     * @description The optimization value. Specify 100 for least optimization and the largest file. (Range: 0 to 100, Server default: 100).\n     * @param {number} num\n     * @return {this}\n     */\n    paths(num) {\n        this._actionModel.paths = num;\n        this._paths = num;\n        return this;\n    }\n    prepareQualifiers() {\n        let str = 'vectorize';\n        if (this._numOfColors) {\n            str += `:${new QualifierValue(`colors:${this._numOfColors}`).toString()}`;\n        }\n        if (this._detailsLevel) {\n            str += `:${new QualifierValue(`detail:${this._detailsLevel}`).toString()}`;\n        }\n        if (this._despeckleLevel) {\n            str += `:${new QualifierValue(`despeckle:${this._despeckleLevel}`).toString()}`;\n        }\n        if (this._paths) {\n            str += `:${new QualifierValue(`paths:${this._paths}`).toString()}`;\n        }\n        if (this._cornersLevel) {\n            str += `:${new QualifierValue(`corners:${this._cornersLevel}`).toString()}`;\n        }\n        this.addQualifier(new Qualifier('e', str));\n    }\n    static fromJson(actionModel) {\n        const { actionType, paths, cornersLevel, despeckleLevel, detailLevel, numOfColors } = actionModel;\n        // We are using this() to allow inheriting classes to use super.fromJson.apply(this, [actionModel])\n        // This allows the inheriting classes to determine the class to be created\n        const result = new this();\n        paths && result.paths(paths);\n        cornersLevel && result.cornersLevel(cornersLevel);\n        despeckleLevel && result.despeckleLevel(despeckleLevel);\n        detailLevel && result.detailsLevel(detailLevel);\n        numOfColors && result.numOfColors(numOfColors);\n        return result;\n    }\n}\nexport { VectorizeEffectAction };\n", "import { Action } from \"../../internal/Action.js\";\nimport { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\n/**\n * @description Simulates the way an image would appear to someone with the specified color blind condition\n * @extends SDK.Action\n * @memberOf Actions.Effect\n * @see Visit {@link Actions.Effect|Effect} for an example\n */\nclass SimulateColorBlindEffectAction extends Action {\n    constructor() {\n        super();\n        this._actionModel = {};\n        this._actionModel.actionType = 'simulateColorblind';\n        this.addQualifier(new Qualifier('e', `simulate_colorblind`));\n    }\n    setQualifier(val) {\n        const strToAppend = `:${val}`;\n        if (val) {\n            this.addQualifier(new Qualifier('e', `simulate_colorblind${strToAppend}`));\n        }\n        return this;\n    }\n    /**\n     * @description Sets the color blind condition to simulate.\n     * @param {Qualifiers.simulateColorBlindValues | SimulateColorBlindType | string} cond\n     * @return {this}\n     */\n    condition(cond) {\n        this._actionModel.condition = cond;\n        return this.setQualifier(cond);\n    }\n    static fromJson(actionModel) {\n        const { actionType, condition } = actionModel;\n        // We are using this() to allow inheriting classes to use super.fromJson.apply(this, [actionModel])\n        // This allows the inheriting classes to determine the class to be created\n        const result = new this();\n        condition && result.condition(condition);\n        return result;\n    }\n}\nexport { SimulateColorBlindEffectAction };\n", "import { LeveledEffectAction } from \"./LeveledEffectAction.js\";\n/**\n * @description A class that provides a built in level() method that sets the level of the effect\n * @extends {Actions.Effect.LeveledEffectAction}\n * @memberOf Actions.Effect\n * @see Visit {@link Actions.Effect|Effect} for an example\n */\nclass EffectActionWithLevel extends LeveledEffectAction {\n    level(value) {\n        this._actionModel.level = value;\n        return this.setLevel(value);\n    }\n}\nexport { EffectActionWithLevel };\n", "import { Action } from \"../../internal/Action.js\";\nimport { QualifierValue } from \"../../internal/qualifier/QualifierValue.js\";\nimport { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\n/**\n * @description Applies stripes to the image to help people with common color-blind conditions to differentiate between colors that are similar for them.\n *              You can replace colors using the xray() method.\n * @extends SDK.Action\n * @memberOf Actions.Effect\n * @see Visit {@link Actions.Effect|Effect} for an example\n */\nclass AssistColorBlindEffectAction extends Action {\n    constructor() {\n        super();\n        this._actionModel = {};\n        this._actionModel.actionType = 'assistColorblind';\n        this.addQualifier(new Qualifier('e', new QualifierValue('assist_colorblind')));\n    }\n    /**\n     * @description Replaces problematic colors with colors that are easier to differentiate.\n     * @return {this}\n     */\n    xray() {\n        this._actionModel.type = 'xray';\n        return this.addQualifier(new Qualifier('e', new QualifierValue(['assist_colorblind', 'xray']).setDelimiter(':')));\n    }\n    /**\n     * @description Applies stripes of the specified intensity to help people with common color blind conditions to differentiate between colors that are similar for them.\n     * @param {number | string} strength The intensity of the stripes. (Range: 1 to 100, Server default: 10)\n     * @return {this}\n     */\n    stripesStrength(strength) {\n        this._actionModel.type = 'stripes';\n        this._actionModel.stripesStrength = strength;\n        return this.addQualifier(new Qualifier('e', new QualifierValue(['assist_colorblind', strength]).setDelimiter(':')));\n    }\n    static fromJson(actionModel) {\n        const { actionType, type, stripesStrength } = actionModel;\n        // We are using this() to allow inheriting classes to use super.fromJson.apply(this, [actionModel])\n        // This allows the inheriting classes to determine the class to be created\n        const result = new this();\n        if (type === 'xray') {\n            result.xray();\n        }\n        if (type === 'stripes') {\n            stripesStrength && result.stripesStrength(stripesStrength);\n        }\n        return result;\n    }\n}\nexport { AssistColorBlindEffectAction };\n", "import { Action } from \"../../internal/Action.js\";\nimport { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\n/**\n * @description Applies a gradient fade effect from one edge of the image.\n * @extends SDK.Action\n * @memberOf Actions.Effect\n * @see Visit {@link Actions.Effect|Effect} for an example\n */\nclass GradientFadeEffectAction extends Action {\n    constructor() {\n        super(...arguments);\n        this._actionModel = { actionType: 'gradientFade' };\n    }\n    /**\n     * @description Sets the strength of the fade effect.\n     * @param {number} strength The strength of the fade effect. (Range: 0 to 100, Server default: 20)\n     */\n    strength(strength) {\n        this._actionModel.strength = strength;\n        this._strength = strength;\n        return this;\n    }\n    /**\n     * @description Sets the mode of gradient fade.\n     * @param {string | Qualifiers.GradientFade} type The mode of gradient fade.\n     */\n    type(type) {\n        this._actionModel.type = type;\n        this._type = type;\n        return this;\n    }\n    /**\n     * @description Sets the x dimension of the start point.\n     * @param {number | string} x The x dimension of the start point.\n     */\n    horizontalStartPoint(x) {\n        this._actionModel.horizontalStartPoint = x;\n        return this.addQualifier(new Qualifier('x', x));\n    }\n    /**\n     * @description Sets the y dimension of the start point.\n     * @param {number | string} y The y dimension of the start point.\n     */\n    verticalStartPoint(y) {\n        this._actionModel.verticalStartPoint = y;\n        return this.addQualifier(new Qualifier('y', y));\n    }\n    prepareQualifiers() {\n        let str = 'gradient_fade';\n        if (this._type) {\n            str += `:${this._type}`;\n        }\n        if (this._strength) {\n            str += `:${this._strength}`;\n        }\n        this.addQualifier(new Qualifier('e', str));\n    }\n    static fromJson(actionModel) {\n        const { actionType, verticalStartPoint, horizontalStartPoint, type, strength } = actionModel;\n        // We are using this() to allow inheriting classes to use super.fromJson.apply(this, [actionModel])\n        // This allows the inheriting classes to determine the class to be created\n        const result = new this();\n        verticalStartPoint && result.verticalStartPoint(verticalStartPoint);\n        horizontalStartPoint && result.horizontalStartPoint(horizontalStartPoint);\n        type && result.type(type);\n        strength && result.strength(strength);\n        return result;\n    }\n}\nexport { GradientFadeEffectAction };\n", "import { Action } from \"../../../internal/Action.js\";\nimport { Qualifier } from \"../../../internal/qualifier/Qualifier.js\";\nimport { QualifierValue } from \"../../../internal/qualifier/QualifierValue.js\";\n/**\n * @description Fade out at the end of the video, use the length() method to set the time in ms for the fade to occur. (Server default: 2000)\n * @extends LeveledEffectAction\n * @memberOf Actions.Effect\n * @see Visit {@link Actions.Effect|Effect} for an example\n */\nclass FadeOutEffectAction extends Action {\n    constructor(duration) {\n        super();\n        this._actionModel = { actionType: 'fadeOut' };\n        this.addQualifier(new Qualifier('e', new QualifierValue(['fade', `-${duration}`]).setDelimiter(':')));\n        duration && (this._actionModel.length = duration);\n    }\n    /**\n     *\n     * @description Sets the duration level for the action\n     * @param {string | number} duration - The duration of the effect\n     */\n    duration(duration) {\n        this._actionModel.length = duration;\n        return this.addQualifier(new Qualifier('e', new QualifierValue(['fade', `-${duration}`]).setDelimiter(':')));\n    }\n    static fromJson(actionModel) {\n        const { length } = actionModel;\n        if (length === undefined) {\n            return new this(1000);\n        }\n        // We are using this() to allow inheriting classes to use super.fromJson.apply(this, [actionModel])\n        // This allows the inheriting classes to determine the class to be created\n        const result = new this(length);\n        return result;\n    }\n}\nexport { FadeOutEffectAction };\n", "import { QualifierValue } from \"../../internal/qualifier/QualifierValue.js\";\nimport { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\nimport { prepareColor } from \"../../internal/utils/prepareColor.js\";\nimport { EffectActionWithLevel } from \"./EffectActions/EffectActionWithLevel.js\";\n/**\n * @description Applies a colorizing filter to the asset, use the methods in the class to adjust the filter\n * @extends EffectActionWithLevel\n * @memberOf Actions.Effect\n * @see Visit {@link Actions.Effect|Effect} for an example\n */\nclass ColorizeEffectAction extends EffectActionWithLevel {\n    /**\n     * @description The color to use for colorization. Specify HTML name or RGB hex code. (Server default: gray)\n     * @param {string} color HTML name(red, green, etc.) or RGB hex code. (Server default: gray)\n     * @return {this}\n     */\n    color(color) {\n        this._actionModel.color = color;\n        return this.addQualifier(new Qualifier('co', new QualifierValue(prepareColor(color))));\n    }\n    static fromJson(actionModel) {\n        const { actionType, level, color } = actionModel;\n        // We are using this() to allow inheriting classes to use super.fromJson.apply(this, [actionModel])\n        // This allows the inheriting classes to determine the class to be created\n        const result = new this(actionType, level);\n        color && result.color(color);\n        return result;\n    }\n}\nexport { ColorizeEffectAction };\n", "import { Action } from \"../../internal/Action.js\";\nimport { QualifierValue } from \"../../internal/qualifier/QualifierValue.js\";\nimport { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\nimport { prepareColor } from \"../../internal/utils/prepareColor.js\";\n/**\n * @description Applies a shadow filter to the asset.\n * @memberOf Actions.Effect\n * @extends SDK.Action\n * @see Visit {@link Actions.Effect|Effect} for an example\n */\nclass ShadowEffectAction extends Action {\n    constructor(effectType, strength) {\n        super();\n        this._actionModel = {};\n        this._actionModel.actionType = effectType;\n        this.effectType = effectType;\n        this.addQualifier(new Qualifier('e', new QualifierValue(['shadow', strength])));\n    }\n    /**\n     * @description The strength of the shadow. (Range: 0 to 100, Server default: 40)\n     * @param {number} strength\n     * @return {this}\n     */\n    strength(strength) {\n        this._actionModel.strength = strength;\n        return this.addQualifier(new Qualifier('e', new QualifierValue(['shadow', strength])));\n    }\n    /**\n     * @description The X offset the shadow\n     * @param {number | SDK.ExpressionQualifier} x\n     * @return {this}\n     */\n    offsetX(x) {\n        this._actionModel.offsetX = x;\n        return this.addQualifier(new Qualifier('x', new QualifierValue(x)));\n    }\n    /**\n     * @description The Y offset the shadow\n     * @param {number | SDK.ExpressionQualifier} y\n     * @return {this}\n     */\n    offsetY(y) {\n        this._actionModel.offsetY = y;\n        return this.addQualifier(new Qualifier('y', new QualifierValue(y)));\n    }\n    /**\n     * @description The color of the shadow (Server default: gray)\n     * @param color\n     * @return {this}\n     */\n    color(color) {\n        this._actionModel.color = color;\n        return this.addQualifier(new Qualifier('co', new QualifierValue(prepareColor(color))));\n    }\n    static fromJson(actionModel) {\n        const { actionType, strength, offsetX, offsetY, color } = actionModel;\n        // We are using this() to allow inheriting classes to use super.fromJson.apply(this, [actionModel])\n        // This allows the inheriting classes to determine the class to be created\n        const result = new this(actionType, strength);\n        offsetX && result.offsetX(offsetX);\n        offsetY && result.offsetY(offsetY);\n        color && result.color(color);\n        return result;\n    }\n}\nexport { ShadowEffectAction };\n", "import { QualifierValue } from \"../../internal/qualifier/QualifierValue.js\";\nimport { Action } from \"../../internal/Action.js\";\nimport { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\n/**\n * @description - This Action, while belonging to Effect, acts as a modified overlay.\n *                The class implements the Builder pattern, where strength() and preserveColor()\n *                are applied to the instance, and toString() is responsible to combining them into the right result.\n * @extends SDK.Action\n * @memberOf Actions.Effect\n * @see Visit {@link Actions.Effect|Effect} for an example\n */\nclass StyleTransfer extends Action {\n    /**\n     * The Image Source used to create the style transfer,\n     * Use the Image Source builder to quickly create a source:\n     * </br>Import: {@link Qualifiers.Source|import Sources from '@cloudinary/url-gen/qualifiers/sources';}\n     * </br>Create: `Source.image('dog')`\n     * @param {ImageSource} imageSource\n     */\n    constructor(imageSource) {\n        super();\n        this.imageSource = imageSource;\n    }\n    /**\n     * Determines the strength in which the styleTransfer is applied.\n     * @param {number} [effectStrength] - The strength level, 1-100, default: 100\n     * @return {this}\n     */\n    strength(effectStrength = null) {\n        this.effectStrength = effectStrength;\n        return this;\n    }\n    /**\n     * More aggressively preserves the colors of the the target photo,\n     * Can be used with `strength()` to enhance this behaviour\n     * @param {boolean} bool\n     * @return {this}\n     */\n    preserveColor(bool = true) {\n        this.preserve = bool;\n        return this;\n    }\n    /**\n     * The `build` phase of the Action, used internally to concat all the options received into a single string.\n     * The result of this method is the toString() of the imageLayer provided in the constructor.\n     * @return {string}\n     */\n    toString() {\n        const NAME = 'style_transfer';\n        const PRES = this.preserve ? 'preserve_color' : null;\n        const STRENGTH = this.effectStrength;\n        // Create the style effect\n        const styleEffect = new Qualifier('e', new QualifierValue([NAME, PRES, STRENGTH]));\n        // Handle the source for publicID,\n        const sourceOpenString = this.imageSource.getOpenSourceString('l');\n        // Handle source transformation\n        const imgTx = this.imageSource.getTransformation();\n        const sourceTransformation = imgTx ? imgTx.toString() : '';\n        return [\n            sourceOpenString,\n            sourceTransformation,\n            `${styleEffect},fl_layer_apply`\n        ].filter((a) => a).join('/');\n    }\n}\nexport { StyleTransfer };\n", "import { LeveledEffectAction } from \"./EffectActions/LeveledEffectAction.js\";\n/**\n * @description Applies an ordered dither filter to the image.\n * @extends LeveledEffectAction\n * @memberOf Actions.Effect\n * @see Visit {@link Actions.Effect|Effect} for an example\n */\nclass DitherEffectAction extends LeveledEffectAction {\n    constructor() {\n        super(...arguments);\n        this._actionModel = { actionType: 'dither' };\n    }\n    /**\n     *\n     * @param {Qualifiers.Dither} ditherType - The dither type applied to the image\n     * @return {this}\n     */\n    type(ditherType) {\n        this._actionModel.type = ditherType;\n        const qualifierEffect = this.createEffectQualifier(this.effectType, ditherType);\n        this.addQualifier(qualifierEffect);\n        return this;\n    }\n    static fromJson(actionModel) {\n        const { actionType, type } = actionModel;\n        // We are using this() to allow inheriting classes to use super.fromJson.apply(this, [actionModel])\n        // This allows the inheriting classes to determine the class to be created\n        const result = new this(actionType);\n        type && result.type(type);\n        return result;\n    }\n}\nexport { DitherEffectAction };\n", "import { LeveledEffectAction } from \"../EffectActions/LeveledEffectAction.js\";\n/**\n * @description Removes small motion shifts from the video. with a maximum extent of movement in the horizontal and vertical direction of 32 pixels\n * @extends LeveledEffectAction\n * @memberOf Actions.Effect\n * @see Visit {@link Actions.Effect|Effect} for an example\n */\nclass DeshakeEffectAction extends LeveledEffectAction {\n    constructor() {\n        super(...arguments);\n        this._actionModel = { actionType: 'deshake' };\n    }\n    /**\n     * The maximum number of pixels in the horizontal and vertical direction that will be addressed. (Possible values: 16, 32, 48, 64. Server default: 16)\n     * @param value Possible values: 16, 32, 48, 64.  Server default: 16.\n     */\n    shakeStrength(value) {\n        this._actionModel.pixels = value;\n        const qualifierEffect = this.createEffectQualifier(this.effectType, value);\n        this.addQualifier(qualifierEffect);\n        return this;\n    }\n    static fromJson(actionModel) {\n        const { actionType, pixels } = actionModel;\n        // We are using this() to allow inheriting classes to use super.fromJson.apply(this, [actionModel])\n        // This allows the inheriting classes to determine the class to be created\n        const result = new this(actionType, pixels);\n        return result;\n    }\n}\nexport { DeshakeEffectAction };\n", "import { Qualifier } from \"../../../internal/qualifier/Qualifier.js\";\nimport { Action } from \"../../../internal/Action.js\";\nimport { custom, faces } from \"../../../qualifiers/region.js\";\n/**\n * @description The Action class of the pixelate Builder\n * @extends SDK.Action\n * @memberOf Actions.Effect\n * @see Visit {@link Actions.Effect|Effect} for an example\n */\nclass Pixelate extends Action {\n    constructor(squareSize) {\n        super();\n        this._actionModel = {};\n        this._squareSize = squareSize;\n        this._actionModel.actionType = 'pixelate';\n        this._actionModel.squareSize = squareSize;\n    }\n    /**\n     * @description Specifies the region to piexlate.\n     * @param {NamedRegion} pixelateRegion\n     */\n    region(pixelateRegion) {\n        this._region = pixelateRegion;\n        this._actionModel.region = { regionType: this._region.regionType };\n        return this;\n    }\n    /**\n     * @description Sets the squareSize of the pixelate effect.\n     * @param {number | string} squareSize\n     */\n    squareSize(squareSize) {\n        this._squareSize = squareSize;\n        this._actionModel.squareSize = squareSize;\n        return this;\n    }\n    prepareQualifiers() {\n        /*\n         * pixelate with region is a unique object in this codebase.\n         * On top of pixelate being an Action with Qualifiers,\n         * it also accepts a Qualifier called Region.\n         *\n         * This Qualifier is in itself composite of qualifiers (such as height, or width).\n         * The existence of Region changes the output of pixelate in non traditional ways\n         * which forced this relatively ad-hoc implementation.\n         *\n         * Aside from all of that, all of the Qualifiers in the component should be alphabetized\n         * This happens naturally in the Action class,\n         * however since we're dealing with two levels of qualifiers (pixelate and Region),\n         * these need to be merged.\n         *\n         * This function will merge the Region qualifiers with pixelate\n         * and add all needed implicit qualifiers (like g_ocr_text).\n         * We're not using the full Gravity Qualifier here to prevent the code import for such a simplistic case\n         */\n        const str = this._squareSize ? `:${this._squareSize}` : '';\n        if ('_region' in this) {\n            const qualifiers = this._region.qualifiers;\n            // Copy qualifiers from the region \"action\" to the pixelate action\n            qualifiers.forEach((q) => this.addQualifier(q));\n            if (this._region.regionType === 'custom') {\n                this.addQualifier(new Qualifier('e', `pixelate_region${str}`));\n            }\n            if (this._region.regionType === 'ocr_text') {\n                this.addQualifier(new Qualifier('e', `pixelate_region${str}`));\n                this.addQualifier(new Qualifier('g', `ocr_text`));\n            }\n            if (this._region.regionType === 'faces') {\n                this.addQualifier(new Qualifier('e', `pixelate_faces${str}`));\n            }\n        }\n        else {\n            this.addQualifier(new Qualifier('e', `pixelate${str}`));\n        }\n    }\n    static fromJson(actionModel) {\n        const { region, squareSize } = actionModel;\n        // We are using this() to allow inheriting classes to use super.fromJson.apply(this, [actionModel])\n        // This allows the inheriting classes to determine the class to be created\n        const result = new this(squareSize);\n        squareSize && result.squareSize(squareSize);\n        if (region && region.regionType === 'faces') {\n            result.region(faces());\n        }\n        if (region && region.regionType === 'custom') {\n            result.region(custom());\n        }\n        return result;\n    }\n}\nexport { Pixelate };\n", "import { LeveledEffectAction } from \"./LeveledEffectAction.js\";\n/**\n * @description A class for all effects that include a strength method\n * @extends {Actions.Effect.LeveledEffectAction}\n * @memberOf Actions.Effect\n * @see Visit {@link Actions.Effect|Effect} for an example\n */\nclass EffectActionWithStrength extends LeveledEffectAction {\n    constructor() {\n        super(...arguments);\n        this.LEVEL_NAME = 'strength';\n    }\n    strength(value) {\n        return this.setLevel(value);\n    }\n}\nexport { EffectActionWithStrength };\n", "import { LeveledEffectAction } from \"../EffectActions/LeveledEffectAction.js\";\n/**\n * @description Converts the image to black and white.\n * @extends LeveledEffectAction\n * @memberOf Actions.Effect\n * @see Visit {@link Actions.Effect|Effect} for an example\n */\nclass BlackwhiteEffectAction extends LeveledEffectAction {\n    threshold(value) {\n        return this.setLevel(value);\n    }\n}\nexport { BlackwhiteEffectAction };\n", "import { Action } from \"../../../internal/Action.js\";\nimport { Qualifier } from \"../../../internal/qualifier/Qualifier.js\";\nimport { QualifierValue } from \"../../../internal/qualifier/QualifierValue.js\";\n/**\n * @description Fade out at the end of the video, use the length() method to set the time in ms for the fade to occur. (Server default: 2000)\n * @extends Action\n * @memberOf Actions.Effect\n * @see Visit {@link Actions.Effect|Effect} for an example\n */\nclass FadeInEffectAction extends Action {\n    constructor(duration) {\n        super();\n        this._actionModel = { actionType: 'fadeIn' };\n        this.addQualifier(new Qualifier('e', new QualifierValue(['fade', `${duration}`]).setDelimiter(':')));\n        duration && (this._actionModel.length = duration);\n    }\n    /**\n     *\n     * @description Sets the duration level for the action\n     * @param {string | number} duration - The duration of the effect\n     */\n    duration(duration) {\n        this._actionModel.length = duration;\n        return this.addQualifier(new Qualifier('e', new QualifierValue(['fade', `${duration}`]).setDelimiter(':')));\n    }\n    static fromJson(actionModel) {\n        const { length } = actionModel;\n        if (length === undefined) {\n            return new this(1000);\n        }\n        // We are using this() to allow inheriting classes to use super.fromJson.apply(this, [actionModel])\n        // This allows the inheriting classes to determine the class to be created\n        const result = new this(length);\n        return result;\n    }\n}\nexport { FadeInEffectAction };\n", "import { Action } from \"../../internal/Action.js\";\nimport { QualifierValue } from \"../../internal/qualifier/QualifierValue.js\";\nimport { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\n/**\n * @description A class that defines how to remove the background of an asset\n * @extends SDK.Action\n * @memberOf Actions.Effect\n * @see Visit {@link Actions.Effect|Effect} for an example\n */\nclass RemoveBackgroundAction extends Action {\n    constructor() {\n        super();\n        this.overwriteQualifier();\n    }\n    /**\n     * @description Everytime this method is called, it will overwrite the e_bgremoval qualifier with new values\n     * @private\n     */\n    overwriteQualifier() {\n        const value = ['bgremoval', this._screen ? 'screen' : '', (this._colorToRemove || '').replace('#', '')];\n        return this.addQualifier(new Qualifier('e', new QualifierValue(value)));\n    }\n    /**\n     * @description The strength of the shadow. (Range: 0 to 100, Server default: 40)\n     * @param {number} useScreen Boolean, defaults to true\n     * @return {this}\n     */\n    screen(useScreen = true) {\n        this._screen = useScreen;\n        return this.overwriteQualifier();\n    }\n    /**\n     * @description The color to remove from the background\n     * @param {SystemColors} color\n     * @return {this}\n     */\n    colorToRemove(color) {\n        this._colorToRemove = color;\n        return this.overwriteQualifier();\n    }\n}\nexport { RemoveBackgroundAction };\n", "import { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\nimport { QualifierValue } from \"../../internal/qualifier/QualifierValue.js\";\nimport { Action } from \"../../internal/Action.js\";\n/**\n * @description Changes the main background color to the one specified, as if a 'theme change' was applied (e.g. dark mode vs light mode).\n * @extends SDK.Action\n * @memberOf {Actions.Effect}\n * @see Visit {@link Actions.Effect|Effect} for an example\n */\nclass ThemeEffect extends Action {\n    constructor(color) {\n        super();\n        this.effectName = 'theme';\n        this.color = color;\n    }\n    /**\n     * @description The sensitivity to photographic elements of an image.\n     *              A value of 0 treats the whole image as non-photographic.\n     *              A value of 200 treats the whole image as photographic, so no theme change is applied.\n     * @param {number} photosensitivity\n     * @return {this}\n     */\n    photosensitivity(photosensitivity) {\n        this._photosensitivity = photosensitivity;\n        return this;\n    }\n    prepareQualifiers() {\n        const sensitivity = this._photosensitivity ? `:photosensitivity_${this._photosensitivity}` : '';\n        // Replace # in hex colors (#fff -> fff)\n        const val = `${this.effectName}:color_${this.color.replace('#', '')}${sensitivity}`;\n        this.addQualifier(new Qualifier('e', new QualifierValue(val)));\n        return;\n    }\n}\nexport { ThemeEffect };\n", "import { Action } from \"../../internal/Action.js\";\nimport { QualifierValue } from \"../../internal/qualifier/QualifierValue.js\";\nimport { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\n/**\n * @description A class that defines how to remove the background of an asset\n * @extends SDK.Action\n * @memberOf Actions.Effect\n * @see Visit {@link Actions.Effect|Effect} for an example\n */\nclass BackgroundRemoval extends Action {\n    constructor() {\n        super();\n        this._actionModel.actionType = \"backgroundRemoval\";\n    }\n    fineEdges(value = true) {\n        this._fineEdges = value;\n        this._actionModel.fineEdges = this._fineEdges;\n        return this;\n    }\n    hints(...values) {\n        if (values.length === 1 && Array.isArray(values[0])) {\n            // Handle the case of a single array argument\n            this._hints = values[0];\n        }\n        else if (values.length) {\n            this._hints = values;\n        }\n        if (this._hints) {\n            this._actionModel.hints = this._hints;\n        }\n        return this;\n    }\n    prepareQualifiers() {\n        var _a;\n        let str = \"background_removal\";\n        const params = [];\n        if (this._fineEdges !== undefined) {\n            params.push(new QualifierValue(`fineedges_${this._fineEdges ? \"y\" : \"n\"}`).toString());\n        }\n        if ((_a = this._hints) === null || _a === void 0 ? void 0 : _a.length) {\n            params.push(new QualifierValue(`hints_(${this._hints.join(\";\")})`).toString());\n        }\n        if (params.length > 0) {\n            str += `:${params.join(\";\")}`;\n        }\n        this.addQualifier(new Qualifier(\"e\", str));\n    }\n    static fromJson(actionModel) {\n        const { fineEdges, hints } = actionModel;\n        const result = new this();\n        if (fineEdges !== undefined) {\n            result.fineEdges(fineEdges);\n        }\n        if (hints === null || hints === void 0 ? void 0 : hints.length) {\n            result.hints(hints);\n        }\n        return result;\n    }\n}\nexport { BackgroundRemoval };\n", "import { Action } from \"../../internal/Action.js\";\nimport { QualifierValue } from \"../../internal/qualifier/QualifierValue.js\";\nimport { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\n/**\n * @description Adds a shadow to the object in an image.\n * @extends SDK.Action\n * @memberOf Actions.Effect\n * @see Visit {@link Actions.Effect|Effect} for an example\n */\nclass DropShadow extends Action {\n    constructor() {\n        super();\n        this._actionModel = {};\n        this._actionModel.actionType = 'dropshadow';\n    }\n    /**\n     * @description\n     * The direction the light is coming from to cause the shadow effect. (Range: 0 to 360, Server default: 215)\n     * @param {number} azimuth\n     * @return {this}\n     */\n    azimuth(azimuth) {\n        this._actionModel.azimuth = azimuth;\n        this._azimuth = azimuth;\n        return this;\n    }\n    /**\n     * @description\n     * The height of the light source above the 'ground' to cause the shadow effect. (Range: 0 to 90, Server default: 45)\n     * @param {number} elevation\n     * @return {this}\n     */\n    elevation(elevation) {\n        this._actionModel.elevation = elevation;\n        this._elevation = elevation;\n        return this;\n    }\n    /**\n     * @description\n     * The spread of the light source. A small number means 'point' light. A larger number means 'area' light. (Range: 0 to 100, Server default: 50)\n     * @param {number} spread\n     * @return {this}\n     */\n    spread(spread) {\n        this._actionModel.spread = spread;\n        this._spread = spread;\n        return this;\n    }\n    prepareQualifiers() {\n        const paramNames = ['azimuth', 'elevation', 'spread'];\n        const paramValues = [this._azimuth, this._elevation, this._spread];\n        const paramString = paramValues.map((value, index) => value !== undefined ? `${paramNames[index]}_${value}` : '').filter(Boolean).join(';');\n        this.addQualifier(new Qualifier('e', new QualifierValue(['dropshadow', paramString]).setDelimiter(':')));\n    }\n    static fromJson(actionModel) {\n        const { azimuth, elevation, spread } = actionModel;\n        // We are using this() to allow inheriting classes to use super.fromJson.apply(this, [actionModel])\n        // This allows the inheriting classes to determine the class to be created\n        const result = new this();\n        azimuth && result.azimuth(azimuth);\n        elevation && result.elevation(elevation);\n        spread && result.spread(spread);\n        return result;\n    }\n}\nexport { DropShadow };\n", "import { Action } from \"../../internal/Action.js\";\nimport { QualifierValue } from \"../../internal/qualifier/QualifierValue.js\";\nimport { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\nimport { RectangleRegion } from \"../../qualifiers/region/RectangleRegion.js\";\n/**\n * @description A class that defines how to remove objects from an asset using Generative AI\n * @extends SDK.Action\n * @memberOf Actions.Effect\n * @see Visit {@link Actions.Effect|Effect} for an example\n */\nclass GenerativeRemove extends Action {\n    constructor() {\n        super();\n        this._prompts = [];\n        this._regions = [];\n        this._detectMultiple = false;\n        this._removeShadow = false;\n        this._actionModel.actionType = \"generativeRemove\";\n    }\n    prompt(...value) {\n        this._prompts = value;\n        if (this._prompts.length > 0) {\n            this._actionModel.prompts = this._prompts;\n        }\n        return this;\n    }\n    region(...value) {\n        this._regions = value;\n        if (this._regions.length > 0) {\n            this._actionModel.regions = this._regions.map((region) => region.toJson());\n        }\n        return this;\n    }\n    detectMultiple(value = true) {\n        this._detectMultiple = value;\n        if (this._detectMultiple) {\n            this._actionModel.detectMultiple = this._detectMultiple;\n        }\n        return this;\n    }\n    removeShadow(value = true) {\n        this._removeShadow = value;\n        if (this._removeShadow) {\n            this._actionModel.removeShadow = this._removeShadow;\n        }\n        return this;\n    }\n    prepareQualifiers() {\n        const qualifierValue = new QualifierValue().setDelimiter(\";\");\n        switch (true) {\n            case this._prompts.length > 0: {\n                qualifierValue.addValue(this.preparePromptValue());\n                break;\n            }\n            case this._regions.length > 0: {\n                qualifierValue.addValue(this.prepareRegionValue());\n                break;\n            }\n        }\n        if (this._detectMultiple) {\n            qualifierValue.addValue(\"multiple_true\");\n        }\n        if (this._removeShadow) {\n            qualifierValue.addValue(\"remove-shadow_true\");\n        }\n        this.addQualifier(new Qualifier(\"e\", `gen_remove:${qualifierValue.toString()}`));\n    }\n    preparePromptValue() {\n        const prompts = this._prompts;\n        const qualifierValue = new QualifierValue().setDelimiter(\";\");\n        if (prompts.length === 1) {\n            qualifierValue.addValue(`prompt_${prompts[0]}`);\n        }\n        else {\n            qualifierValue.addValue(`prompt_(${prompts.join(\";\")})`);\n        }\n        return qualifierValue;\n    }\n    prepareRegionValue() {\n        const regions = this._regions;\n        const qualifierValue = new QualifierValue();\n        if (regions.length === 1) {\n            const singleRegion = regions[0].toString();\n            qualifierValue.addValue(`region_${singleRegion}`);\n        }\n        else {\n            const regionList = regions.map((region) => region.toString());\n            qualifierValue.addValue(`region_(${regionList.join(\";\")})`);\n        }\n        return qualifierValue;\n    }\n    static fromJson(actionModel) {\n        const { prompts, regions, detectMultiple, removeShadow } = actionModel;\n        const result = new this();\n        if (regions) {\n            result.region(...regions.map(({ x, y, width, height }) => new RectangleRegion(x, y, width, height)));\n        }\n        if (prompts) {\n            result.prompt(...prompts);\n        }\n        if (detectMultiple) {\n            result.detectMultiple(detectMultiple);\n        }\n        if (removeShadow) {\n            result.removeShadow(removeShadow);\n        }\n        return result;\n    }\n}\nexport { GenerativeRemove };\n", "import { Action } from \"../../internal/Action.js\";\nimport { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\n/**\n * @description Uses generative AI to replace parts of your image with something else.\n * @extends SDK.Action\n * @memberOf Actions.Effect\n * @see Visit {@link Actions.Effect|Effect} for an example\n */\nclass GenerativeReplace extends Action {\n    constructor() {\n        super();\n        this._preserveGeometry = false;\n        this._detectMultiple = false;\n        this._actionModel.actionType = \"generativeReplace\";\n    }\n    from(value) {\n        this._from = value;\n        this._actionModel.from = value;\n        return this;\n    }\n    to(value) {\n        this._to = value;\n        this._actionModel.to = value;\n        return this;\n    }\n    preserveGeometry(value = true) {\n        this._preserveGeometry = value;\n        if (value) {\n            this._actionModel.preserveGeometry = true;\n        }\n        return this;\n    }\n    detectMultiple(value = true) {\n        this._detectMultiple = value;\n        if (this._detectMultiple) {\n            this._actionModel.detectMultiple = this._detectMultiple;\n        }\n        return this;\n    }\n    prepareQualifiers() {\n        let str = `gen_replace:from_${this._from};to_${this._to}`;\n        if (this._preserveGeometry) {\n            str += `;preserve-geometry_true`;\n        }\n        if (this._detectMultiple) {\n            str += `;multiple_true`;\n        }\n        this.addQualifier(new Qualifier(\"e\", str));\n    }\n    static fromJson(actionModel) {\n        const { from, to, preserveGeometry, detectMultiple } = actionModel;\n        const result = new this();\n        result.from(from);\n        result.to(to);\n        if (preserveGeometry) {\n            result.preserveGeometry();\n        }\n        if (detectMultiple) {\n            result.detectMultiple();\n        }\n        return result;\n    }\n}\nexport { GenerativeReplace };\n", "import { Action } from \"../../internal/Action.js\";\nimport { QualifierValue } from \"../../internal/qualifier/QualifierValue.js\";\nimport { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\n/**\n * @description A class that defines how to recolor objects in an asset using Generative AI\n * @extends SDK.Action\n * @memberOf Actions.Effect\n * @see Visit {@link Actions.Effect|Effect} for an example\n */\nclass GenerativeRecolor extends Action {\n    constructor(prompts, color) {\n        super();\n        this._prompts = [];\n        this._detectMultiple = false;\n        // Alias method to be backwards compatible\n        this.multiple = this.detectMultiple.bind(this);\n        this._prompts = Array.isArray(prompts) ? prompts : [prompts];\n        this._toColor = color;\n        this._actionModel.actionType = \"generativeRecolor\";\n        this._actionModel.prompts = this._prompts;\n        this._actionModel.toColor = this._toColor;\n    }\n    detectMultiple(value = true) {\n        this._detectMultiple = value;\n        if (this._detectMultiple) {\n            this._actionModel.detectMultiple = this._detectMultiple;\n        }\n        return this;\n    }\n    prepareQualifiers() {\n        const qualifierValue = new QualifierValue().setDelimiter(\";\");\n        if (this._prompts.length) {\n            qualifierValue.addValue(this.preparePromptValue());\n        }\n        if (this._toColor) {\n            const formattedColor = this._toColor.match(/^#/)\n                ? this._toColor.substr(1)\n                : this._toColor;\n            qualifierValue.addValue(`to-color_${formattedColor}`);\n        }\n        if (this._detectMultiple) {\n            qualifierValue.addValue(\"multiple_true\");\n        }\n        this.addQualifier(new Qualifier(\"e\", `gen_recolor:${qualifierValue.toString()}`));\n    }\n    preparePromptValue() {\n        const prompts = this._prompts;\n        const qualifierValue = new QualifierValue().setDelimiter(\";\");\n        if (prompts.length === 1) {\n            qualifierValue.addValue(`prompt_${prompts[0]}`);\n        }\n        else {\n            qualifierValue.addValue(`prompt_(${prompts.join(\";\")})`);\n        }\n        return qualifierValue;\n    }\n    static fromJson(actionModel) {\n        const { prompts, detectMultiple, toColor } = actionModel;\n        const result = new this(prompts, toColor);\n        if (detectMultiple) {\n            result.detectMultiple(detectMultiple);\n        }\n        return result;\n    }\n}\nexport { GenerativeRecolor };\n", "export const encodePromptComponent = (prompt) => composeStringOperations(encodeURIComponent, replaceMissingChars, decodeSpaces)(prompt);\nconst charsMissingFromUrlEncode = /[!'()*~_.-]/g;\nconst missingCharsMap = {\n    '!': '%21',\n    \"'\": '%27',\n    '(': '%28',\n    ')': '%29',\n    '*': '%2A',\n    '~': '%7E',\n    _: '%5F',\n    '.': '%2E',\n    '-': '%2D',\n};\nconst replaceMissingChars = (str) => {\n    return str.replace(charsMissingFromUrlEncode, (match) => { var _a; return (_a = missingCharsMap[match]) !== null && _a !== void 0 ? _a : match; });\n};\nconst decodeSpaces = (str) => str.replace(/%20/g, ' ');\nconst composeStringOperations = (...fns) => (arg) => fns.reduce((acc, fn) => fn(acc), arg);\n", "import { Action } from \"../../internal/Action.js\";\nimport { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\nimport { encodePromptComponent } from \"../../internal/utils/encodePromptComponents.js\";\n/**\n * @description Uses generative AI to replace background of your image with something else.\n * @extends SDK.Action\n * @memberOf Actions.Effect\n * @see Visit {@link Actions.Effect|Effect} for an example\n */\nclass GenerativeBackgroundReplace extends Action {\n    constructor() {\n        super();\n        this._actionModel.actionType = \"generativeBackgroundReplace\";\n    }\n    prompt(value) {\n        try {\n            this._actionModel.prompt = decodeURIComponent(value);\n        }\n        catch (_a) {\n            this._actionModel.prompt = value;\n        }\n        this._prompt = value;\n        return this;\n    }\n    prepareQualifiers() {\n        if (!this._prompt) {\n            this.addQualifier(new Qualifier(\"e\", \"gen_background_replace\"));\n        }\n        else {\n            this.addQualifier(new Qualifier(\"e\", `gen_background_replace:prompt_${encodePromptComponent(this._prompt)}`));\n        }\n    }\n    static fromJson(actionModel) {\n        const { prompt } = actionModel;\n        const result = new this();\n        return result.prompt(prompt);\n    }\n}\nexport { GenerativeBackgroundReplace };\n", "import { Action } from \"../../internal/Action.js\";\nimport { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\nimport { QualifierValue } from \"../../internal/qualifier/QualifierValue.js\";\n/**\n * @description Extracts an area or multiple areas of an image, described in natural language.\n * @extends SDK.Action\n * @memberOf Actions.Effect\n * @see Visit {@link Actions.Effect|Effect} for an example\n */\nclass Extract extends Action {\n    constructor(prompts) {\n        super();\n        this._prompts = [];\n        this._detectMultiple = false;\n        this._invert = false;\n        this._preserveAlpha = false;\n        this._actionModel.actionType = \"extract\";\n        this._prompts = Array.isArray(prompts) ? prompts : [prompts];\n        this._actionModel.prompts = this._prompts;\n    }\n    detectMultiple(value = false) {\n        this._detectMultiple = value;\n        if (this._detectMultiple) {\n            this._actionModel.detectMultiple = this._detectMultiple;\n        }\n        return this;\n    }\n    mode(mode) {\n        this._mode = mode;\n        this._actionModel.mode = this._mode;\n        return this;\n    }\n    invert(value = true) {\n        this._invert = value;\n        if (this._invert) {\n            this._actionModel.invert = this._invert;\n        }\n        return this;\n    }\n    preserveAlpha(value = true) {\n        this._preserveAlpha = value;\n        if (this._preserveAlpha) {\n            this._actionModel.preserveAlpha = this._preserveAlpha;\n        }\n        return this;\n    }\n    prepareQualifiers() {\n        const qualifierValue = new QualifierValue().setDelimiter(\";\");\n        if (this._prompts.length) {\n            qualifierValue.addValue(this.preparePromptValue());\n        }\n        if (this._detectMultiple) {\n            qualifierValue.addValue(\"multiple_true\");\n        }\n        if (this._mode) {\n            qualifierValue.addValue(`mode_${this._mode}`);\n        }\n        if (this._invert) {\n            qualifierValue.addValue(\"invert_true\");\n        }\n        if (this._preserveAlpha) {\n            qualifierValue.addValue(\"preserve-alpha_true\");\n        }\n        this.addQualifier(new Qualifier(\"e\", `extract:${qualifierValue.toString()}`));\n    }\n    preparePromptValue() {\n        const prompts = this._prompts;\n        const qualifierValue = new QualifierValue().setDelimiter(\";\");\n        if (prompts.length === 1) {\n            qualifierValue.addValue(`prompt_${prompts[0]}`);\n        }\n        else {\n            qualifierValue.addValue(`prompt_(${prompts.join(\";\")})`);\n        }\n        return qualifierValue;\n    }\n    static fromJson(actionModel) {\n        const { prompts, detectMultiple, mode, invert, preserveAlpha } = actionModel;\n        const result = new this(prompts);\n        if (detectMultiple) {\n            result.detectMultiple(detectMultiple);\n        }\n        if (mode) {\n            result.mode(mode);\n        }\n        if (invert) {\n            result.invert(invert);\n        }\n        if (preserveAlpha) {\n            result.preserveAlpha(preserveAlpha);\n        }\n        return result;\n    }\n}\nexport { Extract };\n", "import { Action } from \"../../internal/Action.js\";\n/**\n * @description Removes the edges of the image based on the color of the corner pixels.\n * Specify a color other than the color of the corner pixels using the colorOverride() method\n * @extends SDK.Action\n * @memberOf Actions.Reshape\n * @see Visit {@link Actions.Reshape| Reshape} for examples\n */\nclass TrimAction extends Action {\n    constructor() {\n        super();\n        this._actionModel = {\n            actionType: 'trim'\n        };\n    }\n    /**\n     * @param {number} tolerance The tolerance level for color similarity.\n     */\n    colorSimilarity(tolerance) {\n        this._tolerance = tolerance;\n        this._actionModel.colorSimilarity = tolerance;\n        return this;\n    }\n    /**\n     * @param {string | Qualifiers.Color} color Overrides the corner pixels color with the specified color.\n     */\n    colorOverride(color) {\n        this._color = color;\n        this._actionModel.colorOverride = color;\n        return this;\n    }\n    static fromJson(actionModel) {\n        const { colorSimilarity, colorOverride } = actionModel;\n        const action = new TrimAction();\n        action.colorSimilarity(colorSimilarity);\n        action.colorOverride(colorOverride);\n        return action;\n    }\n    toString() {\n        // image.reshape(Reshape.trim()->colorSimilarity(50)->colorOverride(Color.YELLOW));\n        // e_trim:50:yellow\n        return [\n            'e_trim',\n            this._tolerance,\n            this._color\n        ].join(':');\n    }\n}\nexport { TrimAction };\nexport default TrimAction;\n", "import { BlurAction } from \"./effect/Blur.js\";\nimport { AccelerationEffectAction } from \"./effect/leveled/Accelerate.js\";\nimport { LoopEffectAction } from \"./effect/leveled/Loop.js\";\nimport { CartoonifyEffect } from \"./effect/Cartoonify.js\";\nimport { EffectOutline } from \"./effect/Outline.js\";\nimport { SimpleEffectAction } from \"./effect/EffectActions/SimpleEffectAction.js\";\nimport { MakeTransparentEffectAction } from \"./effect/leveled/MakeTransparent.js\";\nimport { VectorizeEffectAction } from \"./effect/Vectorize.js\";\nimport { SimulateColorBlindEffectAction } from \"./effect/SimulateColorBlind.js\";\nimport { EffectActionWithLevel } from \"./effect/EffectActions/EffectActionWithLevel.js\";\nimport { AssistColorBlindEffectAction } from \"./effect/AssistColorBlind.js\";\nimport { GradientFadeEffectAction } from \"./effect/GradientFade.js\";\nimport { FadeOutEffectAction } from \"./effect/leveled/FadeOut.js\";\nimport { ColorizeEffectAction } from \"./effect/Colorize.js\";\nimport { ShadowEffectAction } from \"./effect/Shadow.js\";\nimport { StyleTransfer } from \"./effect/StyleTransfer.js\";\nimport { DitherEffectAction } from \"./effect/Dither.js\";\nimport { DeshakeEffectAction } from \"./effect/leveled/Deshake.js\";\nimport { Pixelate } from \"./effect/pixelate/Pixelate.js\";\nimport { EffectActionWithStrength } from \"./effect/EffectActions/EffectActionWithStrength.js\";\nimport { BlackwhiteEffectAction } from \"./effect/leveled/Blackwhite.js\";\nimport { FadeInEffectAction } from \"./effect/leveled/FadeIn.js\";\nimport { RemoveBackgroundAction } from \"./effect/RemoveBackgroundAction.js\";\nimport { ThemeEffect } from \"./effect/Theme.js\";\nimport { BackgroundRemoval } from \"./effect/BackgroundRemoval.js\";\nimport { DropShadow } from \"./effect/DropShadow.js\";\nimport { GenerativeRemove } from \"./effect/GenerativeRemove.js\";\nimport { GenerativeReplace } from \"./effect/GenerativeReplace.js\";\nimport { GenerativeRecolor } from \"./effect/GenerativeRecolor.js\";\nimport { GenerativeBackgroundReplace } from \"./effect/GenerativeBackgroundReplace.js\";\nimport { Extract } from \"./effect/Extract.js\";\nimport { TrimAction } from \"./reshape/TrimAction.js\";\n/**\n * @summary action\n * @description Applies a blurring filter to the asset.\n * @memberOf Actions.Effect\n * @param {number} blurLevel The strength of the blur. (Range: 1 to 2000, Server default: 100)\n * @return {Actions.Effect.BlurAction}\n */\nfunction blur(blurLevel) {\n    return new BlurAction(blurLevel);\n}\n/**\n * @summary action\n * @description Converts the image to gray-scale (multiple shades of gray).\n * @memberOf Actions.Effect\n * @return {Actions.Effect.SimpleEffectAction}\n */\nfunction grayscale() {\n    return new SimpleEffectAction(\"grayscale\");\n}\n/**\n * @summary action\n * @description Changes the color scheme of the image to sepia.\n * @memberOf Actions.Effect\n * @param {number} level The level of sepia to apply. (Range: 1 to 100, Server default: 80)\n * @return {Actions.Effect.EffectActionWithLevel}\n */\nfunction sepia(level) {\n    return new EffectActionWithLevel(\"sepia\", level);\n}\n/**\n * @summary action\n * @description Applies a shadow filter to the asset.\n * @memberOf Actions.Effect\n * @param shadowLevel\n * @return {Actions.Effect.ShadowEffectAction}\n */\nfunction shadow(shadowLevel) {\n    return new ShadowEffectAction(\"shadow\", shadowLevel);\n}\n/**\n * @summary action\n * @description Applies a colorizing filter to the asset.\n * @memberOf Actions.Effect\n * @param {number} colorizeLevel The strength of the color. (Range: 0 to 100, Server default: 100)\n * @return {Actions.Effect.ColorizeEffectAction}\n */\nfunction colorize(colorizeLevel) {\n    return new ColorizeEffectAction(\"colorize\", colorizeLevel);\n}\n/**\n * @summary action\n * @description Applies an oilPaint filter to the asset.\n * @memberOf Actions.Effect\n * @param {number} oilPaintLevel The strength of the effect. (Range: 0 to 100, Server default: 30)\n * @return {Actions.Effect.EffectActionWithStrength}\n */\nfunction oilPaint(oilPaintLevel) {\n    return new EffectActionWithStrength(\"oil_paint\", oilPaintLevel);\n}\n/**\n * @summary action\n * @description Applies an artistic filter to the asset.\n * @memberOf Actions.Effect\n * @param {ArtisticFilterType | string} artisticFilterType\n * @return {Actions.Effect.SimpleEffectAction}\n */\nfunction artisticFilter(artisticFilterType) {\n    return new SimpleEffectAction(\"art\", artisticFilterType);\n}\n/**\n * @summary action\n * @description Applies a cartoonify effect to the asset.\n * @memberOf Actions.Effect\n * @param cartoonifyLevel The thickness of the lines. (Range: 0 to 100, Server default: 50)\n * @return {Actions.Effect.CartoonifyEffect}\n */\nfunction cartoonify(cartoonifyLevel) {\n    return new CartoonifyEffect(\"cartoonify\", cartoonifyLevel);\n}\n/**\n * @summary action\n * @description Adds an outline to a transparent image. For examples, see the Image Transformations guide.\n * @memberOf Actions.Effect\n * @return {Actions.Effect.EffectOutline}\n */\nfunction outline() {\n    return new EffectOutline();\n}\n/**\n * @summary action\n * @description Applies a complex deep learning neural network algorithm that extracts artistic styles from a source image and applies them to the content of a target photograph.<br/>\n * <b>Learn more:</b> {@link https://cloudinary.com/documentation/neural_artwork_style_transfer_addon|Neural Artwork Style Transfer}\n * @memberOf Actions.Effect\n * @param {ImageSource} imageSource `import {image} from '@cloudinary/url-gen/qualifiers/sources`\n * @return {Actions.Effect.StyleTransfer}\n */\nfunction styleTransfer(imageSource) {\n    return new StyleTransfer(imageSource);\n}\n/**\n * @summary action\n * @description\n * Causes a video clip to play forwards and then backwards.\n * Use in conjunction with trimming parameters ('duration', 'start_offset', or 'end_offset') and the 'loop' effect to deliver a classic (short, repeating) boomerang clip.<br/>\n * For details and examples, see 'Create a boomerang video clip' in the Video Transformations guide.\n * @memberOf Actions.Effect\n * @return {Actions.Effect.SimpleEffectAction}\n */\nfunction boomerang() {\n    return new SimpleEffectAction(\"boomerang\");\n}\n/**\n * @summary action\n * @description\n * Removes red eyes with the Advanced Facial Attribute Detection add-on.\n * For details, see the Advanced Facial Attribute Detection add-on documentation.\n * @memberOf Actions.Effect\n * @return {Actions.Effect.SimpleEffectAction}\n */\nfunction advancedRedEye() {\n    return new SimpleEffectAction(\"adv_redeye\");\n}\n/**\n * @summary action\n * @description Converts the image to black and white.\n * @memberOf Actions.Effect\n * @param {number | string} level The balance between black (100) and white (0). (Range: 0 to 100, Server default: 50)\n * @return {Actions.Effect.BlackwhiteEffectAction}\n */\nfunction blackwhite(level) {\n    return new BlackwhiteEffectAction(\"blackwhite\", level);\n}\n/**\n * @summary action\n * @description Negates the image colors (negative).\n * @memberOf Actions.Effect\n * @return {Actions.Effect.SimpleEffectAction}\n */\nfunction negate() {\n    return new SimpleEffectAction(\"negate\");\n}\n/**\n * @summary action\n * @description Removes red eyes in the image.\n * @memberOf Actions.Effect\n * @return {Actions.Effect.SimpleEffectAction}\n */\nfunction redEye() {\n    return new SimpleEffectAction(\"redeye\");\n}\n/**\n * @summary action\n * @description Plays the video or audio file in reverse.\n * @memberOf Actions.Effect\n * @return {Actions.Effect.SimpleEffectAction}\n */\nfunction reverse() {\n    return new SimpleEffectAction(\"reverse\");\n}\n/**\n * @summary action\n * @description Changes the speed of the video playback.\n * @memberOf Actions.Effect\n * @param {number} speedIncreasePercent The percentage change of speed. Positive numbers speed up the playback, negative numbers slow down the playback (Range: -50 to 100, Server default: 0)\n * @return {Actions.Effect.AccelerationEffectAction}\n */\nfunction accelerate(speedIncreasePercent) {\n    return new AccelerationEffectAction(speedIncreasePercent);\n}\n/**\n * @summary action\n * @description\n * Fade in at the beginning of the video.\n * For details and examples, see 'Fade in and out' in the Video Transformations guide.\n * @memberOf Actions.Effect\n * @param {number} fadeLength The time in ms for the fade to occur. (Server default: 2000)\n * @return {Actions.Effect.FadeInEffectAction}\n */\nfunction fadeIn(fadeLength) {\n    return new FadeInEffectAction(fadeLength);\n}\n/**\n * @summary action\n * @description\n * Fade out at the end of the video.\n * For details and examples, see 'Fade in and out' in the Video Transformations guide.\n * @memberOf Actions.Effect\n * @param {number} fadeLength The time in ms for the fade to occur. (Server default: 2000)\n * @return {Actions.Effect.FadeoutEffectAction}\n */\nfunction fadeOut(fadeLength) {\n    return new FadeOutEffectAction(fadeLength);\n}\n/**\n * @summary action\n * @description\n * Delivers a video or animated GIF that contains additional loops of the video/GIF.\n * The total number of iterations is the number of additional loops plus one. <br/>\n * For animated GIFs only, you can also specify the loop effect without a numeric value to instruct it to loop the GIF infinitely.\n * @memberOf Actions.Effect\n * @param {number} additionalLoops The additional number of times to play the video or animated GIF.\n * @return {Actions.Effect.LoopEffectAction}\n */\nfunction loop(additionalLoops) {\n    return new LoopEffectAction(\"loop\", additionalLoops);\n}\n/**\n * @summary action\n * @description\n * Makes the background of the image transparent (or solid white for formats that do not support transparency).\n * The background is determined as all pixels that resemble the pixels on the edges of the image.\n *\n * @memberOf Actions.Effect\n * @param {number} tolerance The tolerance used to accommodate variance in the background color. (Range: 0 to 100, Server default: 10)\n * @return {Actions.Effect.MakeTransparentEffectAction}\n */\nfunction makeTransparent(tolerance) {\n    return new MakeTransparentEffectAction(\"make_transparent\", tolerance);\n}\n/**\n * @summary action\n * @description Adds visual noise to the video, visible as a random flicker of \"dots\" or \"snow\".\n * @memberOf Actions.Effect\n * @param {number} percentage The percent of noise to apply. (Range: 0 to 100 Server default: 0)\n * @return {Actions.Effect.EffectActionWithLevel}\n */\nfunction noise(percentage) {\n    return new EffectActionWithLevel(\"noise\", percentage);\n}\n/**\n * @summary action\n * @description Applies a vignette effect.\n * @memberOf Actions.Effect\n * @param {number} strength The strength of the vignette. (Range: 0 to 100, Server default: 20)\n * @return {Actions.Effect.EffectActionWithStrength}\n */\nfunction vignette(strength) {\n    return new EffectActionWithStrength(\"vignette\", strength);\n}\n/**\n * @summary action\n * @description\n * Applies an ordered dither filter to the image.\n * Use the constants defined in {@link Qualifiers.Dither|@cloudinary/url-gen/qualifiers/dither} for ditherType.\n * @memberOf Actions.Effect\n * @param {Qualifiers.Dither} ditherType - The dither type applied to the image\n * @return {Actions.Effect.DitherEffectAction}\n */\nfunction dither(ditherType) {\n    return new DitherEffectAction(\"ordered_dither\", ditherType);\n}\n/**\n * @summary action\n * @description\n * Vectorizes the image.\n * Notes:\n * To deliver the image as a vector image, make sure to change the format (or URL extension) to a vector format, such as SVG.</br>\n * However, you can also deliver in a raster format if you just want to get the 'vectorized' graphic effect.</br>\n * Large images are scaled down to 1000 pixels in the largest dimension before vectorization.\n *\n * @memberOf Actions.Effect\n * @return {Actions.Effect.VectorizeEffectAction}\n */\nfunction vectorize() {\n    return new VectorizeEffectAction();\n}\n/**\n * @summary action\n * @description\n * Applies a gradient fade effect from one edge of the image.\n * Use .x() or .y() to indicate from which edge to fade and how much of the image should be faded.\n * Values of x and y can be specified as a percentage (Range: 0.0 to 1.0), or in pixels (integer values). <br/>\n * Positive values fade from the top (y) or left (x). Negative values fade from the bottom (y) or right (x). <br/>\n * By default, the gradient is applied to the top 50% of the image (y = 0.5).<br/>\n * Only one direction can be specified but the fade can be applied symmetrically using the mode parameter. </br>\n * To apply different amounts of fade to multiple edges, use chained fade effects.\n *\n * @memberOf Actions.Effect\n * @return {Actions.Effect.GradientFadeEffectAction}\n */\nfunction gradientFade() {\n    return new GradientFadeEffectAction();\n}\n/**\n * @summary action\n * @description\n * Applies stripes to the image to help people with common color-blind conditions to differentiate between colors that are similar for them.</br>\n * You can replace colors using the xRay() method of the \\Cloudinary\\Transformation\\AssistColorBlind class.\n * @memberOf Actions.Effect\n * @return {Actions.Effect.AssistColorBlindEffectAction}\n */\nfunction assistColorBlind() {\n    return new AssistColorBlindEffectAction();\n}\n/**\n * @summary action\n * @description\n * Simulates the way an image would appear to someone with the specified color blind condition. </br>\n * For a list of supported color blind conditions see {@link Qualifiers.SimulateColorBlindValues| types of color blindness} for possible values\n * @memberOf Actions.Effect\n * @return {Actions.Effect.SimulateColorBlindEffectAction}\n */\nfunction simulateColorBlind() {\n    return new SimulateColorBlindEffectAction();\n}\n/**\n * @summary action\n * @description Removes small motion shifts from the video. with a maximum extent of movement in the horizontal and vertical direction of 32 pixels\n * @memberOf Actions.Effect\n * @return {Actions.Effect.DeshakeEffectAction}\n */\nfunction deshake(pixels) {\n    return new DeshakeEffectAction(\"deshake\", pixels);\n}\n/**\n * @summary action\n * @description Supports the concatenation of videos with a custom transition by including a transition video as an\n * additional layer and specifying the transition effect\n * @memberOf Actions.Effect\n * @return {Actions.Effect.SimpleEffectAction}\n */\nfunction transition() {\n    return new SimpleEffectAction(\"transition\");\n}\n/**\n * @summary action\n * @description Applies a pixelatering filter to the asset.\n * @memberOf Actions.Effect\n * @param {number} squareSize The squareSize in the pixelation. (Range: 1 to 2000, Server default: 100)\n * @return {Actions.Effect.Pixelate}\n */\nfunction pixelate(squareSize) {\n    return new Pixelate(squareSize);\n}\n/**\n * @summary action\n * @description Makes the background of an image transparent (or solid white for JPGs).</br>\n *              Use when the background is a uniform color.\n *              {@link https://cloudinary.com/documentation/transformation_reference#e_bgremoval|Background Removal}\n *\n * @memberOf Actions.Effect\n * @return {Actions.Effect.RemoveBackgroundAction}\n */\nfunction removeBackground() {\n    return new RemoveBackgroundAction();\n}\n/**\n * @summary action\n * @description Uses the Cloudinary AI Background Removal add-on to make the background of an image transparent.</br>\n *              When combined with other transformations, this effect must be specified in the first component.\n *              {@link https://cloudinary.com/documentation/transformation_reference#e_background_removal|Background Removal}\n *\n * @memberOf Actions.Effect\n * @return {Actions.Effect.BackgroundRemoval}\n */\nfunction backgroundRemoval() {\n    return new BackgroundRemoval();\n}\n/**\n * @summary action\n * @description Adds a shadow to the object in an image.\n *              {@link https://cloudinary.com/documentation/transformation_reference#e_dropshadow|Drop Shadow}\n *\n * @memberOf Actions.Effect\n * @return {Actions.Effect.DropShadow}\n */\nfunction dropShadow() {\n    return new DropShadow();\n}\n/**\n * @summary action\n * @description Remove objects from an asset using Generative AI\n *              {@link https://cloudinary.com/documentation/transformation_reference#e_gen_remove|Generative Remove}\n *\n * @memberOf Actions.Effect\n * @return {Actions.Effect.GenerativeRemove}\n */\nfunction generativeRemove() {\n    return new GenerativeRemove();\n}\n/**\n * @summary action\n * @description Uses generative AI to replace parts of your image with something else.\n *              {@link https://cloudinary.com/documentation/transformation_reference#e_gen_replace|Generative Replace}\n *\n * @memberOf Actions.Effect\n * @return {Actions.Effect.GenerativeReplace}\n */\nfunction generativeReplace() {\n    return new GenerativeReplace();\n}\n/**\n * @summary action\n * @description Uses generative AI to replace background of your image with something else.\n *              {@link https://cloudinary.com/documentation/transformation_reference#e_gen_background_replace|Generative Background Replace}\n *\n * @memberOf Actions.Effect\n * @return {Actions.Effect.GenerativeBackgroundReplace}\n */\nfunction generativeBackgroundReplace() {\n    return new GenerativeBackgroundReplace();\n}\n/**\n * @summary action\n * @description Extracts an area or multiple areas of an image, described in natural language.\n *              {@link https://cloudinary.com/documentation/transformation_reference#e_extract|Extract}\n *\n * @memberOf Actions.Effect\n * @return {Actions.Effect.Extract}\n */\nfunction extract(prompts) {\n    return new Extract(prompts);\n}\n/**\n * @summary action\n * @description Uses generative AI to recolor objects from your image.\n *              {@link https://cloudinary.com/documentation/transformation_reference#e_gen_recolor|Generative Recolor}\n * @param {string | string[]} prompts\n * @param {SystemColors} color\n * @memberOf Actions.Effect\n * @return {Actions.Effect.GenerativeRecolor}\n */\nfunction generativeRecolor(prompts, color) {\n    return new GenerativeRecolor(prompts, color);\n}\n/**\n * @summary action\n * @description\n * Uses generative AI to restore details in poor quality images\n * or images that may have become degraded through repeated processing and compression.\n * @memberOf Actions.Effect\n * @return {Actions.Effect.SimpleEffectAction}\n */\nfunction generativeRestore() {\n    return new SimpleEffectAction(\"gen_restore\");\n}\n/**\n * @summary action\n * @description\n * Uses AI-based prediction to add fine detail while upscaling small images.\n * This 'super-resolution' feature scales each dimension by four, multiplying the total number of pixels by 16.\n * @memberOf Actions.Effect\n * @return {Actions.Effect.SimpleEffectAction}\n */\nfunction upscale() {\n    return new SimpleEffectAction(\"upscale\");\n}\n/**\n *\n * @description Changes the main background color to the one specified, as if a 'theme change' was applied (e.g. dark mode vs light mode).\n * @param {SystemColors} color\n * @return {Actions.Effect.ThemeEffect}\n */\nfunction theme(color) {\n    return new ThemeEffect(color);\n}\n/**\n *\n * @description Uses AI to analyze an image and make adjustments to enhance the appeal of the image.\n * @return {Actions.Effect.Enhance}\n */\nfunction enhance() {\n    return new SimpleEffectAction(\"enhance\");\n}\n/**\n * @summary action\n * @description Removes the edges of the image based on the color of the corner pixels.\n * Specify a color other than the color of the corner pixels using the colorOverride() method\n * @memberOf Actions.Effect\n * @param {number} colorSimilarity The tolerance level for color similarity.\n * @param {SystemColors | string} colorOverride Overrides the corner pixels color with the specified color.\n * @return {Actions.Effect.TrimAction}\n */\nfunction trim(colorSimilarity, colorOverride) {\n    const trimAction = new TrimAction();\n    if (colorSimilarity) {\n        trimAction.colorSimilarity(colorSimilarity);\n    }\n    if (colorOverride) {\n        trimAction.colorOverride(colorOverride);\n    }\n    return trimAction;\n}\n/**\n * @description Defines effects that you can apply to transform your assets.\n * @memberOf Actions\n * @namespace Effect\n * @example\n * <caption>An <b>extreme</b> example of using many effects on the same asset</caption>\n * import {Cloudinary} from \"@cloudinary/url-gen\";\n * // Import everything, or just the action you need for tree-shaking purposes\n * import {Effect, sepia} from \"@cloudinary/url-gen/actions/effect\";\n * import {ArtisticFilter, alDente} from \"@cloudinary/url-gen/qualifiers/artisticFilter\";\n * import {ShakeStrength, pixels16} from \"@cloudinary/url-gen/qualifiers/shakeStrength\";\n * import {cat, dog} from \"@cloudinary/url-gen/qualifiers/ForegroundObject\";\n *\n * const yourCldInstance = new Cloudinary({cloud:{cloudName:'demo'}});\n * const image = yourCldInstance.image('woman');\n *\n * image.effect(Effect.advancedRedEye())\n * .effect(Effect.accelerate())\n * .effect(Effect.accelerate(100))\n * .effect(Effect.accelerate().rate(5))\n * .effect(Effect.boomerang())\n * .effect(Effect.blackwhite())\n * .effect(Effect.blackwhite(10))\n * .effect(Effect.blackwhite().threshold(20))\n * .effect(Effect.fadeIn(100))\n * .effect(Effect.fadeIn().duration(5))\n * .effect(Effect.fadeOut(100))\n * .effect(Effect.fadeOut().duration(5))\n * .effect(Effect.grayscale())\n * .effect(Effect.loop())\n * .effect(Effect.loop(100))\n * .effect(Effect.loop().additionalIterations(5))\n * .effect(Effect.makeTransparent())\n * .effect(Effect.makeTransparent(100))\n * .effect(Effect.makeTransparent().tolerance(5))\n * .effect(Effect.makeTransparent().tolerance(5).colorToReplace('red'))\n * .effect(Effect.noise())\n * .effect(Effect.noise(100))\n * .effect(Effect.noise().level(5))\n * .effect(Effect.negate())\n * .effect(Effect.reverse())\n * .effect(Effect.redEye())\n * .effect(Effect.sepia())\n * .effect(Effect.sepia(100))\n * .effect(Effect.sepia().level(5))\n * .effect(Effect.vignette())\n * .effect(Effect.vignette(100))\n * .effect(Effect.vignette().strength(5))\n * .effect(Effect.deshake())\n * .effect(Effect.deshake(10))\n * .effect(Effect.artisticFilter(alDente())\n * .effect(Effect.deshake().shakeStrength(pixels16()))\n * .effect(Effect.backgroundRemoval().fineEdges(true).hints(cat(), dog())\n * .effect(Effect.generativeRemove().prompt(\"red car\").detectMultiple())\n * .effect(Effect.generativeRemove().region({x: 20, y: 200, width: 100, height: 100}))\n * .effect(Effect.generativeReplace().from(\"ceiling\").to(\"sunny sky\").preserveGeometry(true))\n * .effect(Effect.trim(50, 'yellow'))\n */\nconst Effect = {\n    pixelate: pixelate,\n    deshake: deshake,\n    boomerang: boomerang,\n    advancedRedEye: advancedRedEye,\n    blackwhite,\n    negate: negate,\n    redEye: redEye,\n    reverse: reverse,\n    accelerate: accelerate,\n    fadeIn: fadeIn,\n    fadeOut: fadeOut,\n    loop: loop,\n    makeTransparent: makeTransparent,\n    noise: noise,\n    vignette: vignette,\n    blur: blur,\n    grayscale: grayscale,\n    sepia: sepia,\n    shadow: shadow,\n    colorize: colorize,\n    oilPaint: oilPaint,\n    artisticFilter: artisticFilter,\n    cartoonify: cartoonify,\n    outline: outline,\n    styleTransfer: styleTransfer,\n    gradientFade: gradientFade,\n    vectorize: vectorize,\n    assistColorBlind: assistColorBlind,\n    simulateColorBlind: simulateColorBlind,\n    transition: transition,\n    dither: dither,\n    removeBackground,\n    backgroundRemoval,\n    dropShadow,\n    generativeRemove,\n    generativeReplace,\n    generativeBackgroundReplace,\n    generativeRecolor,\n    generativeRestore,\n    upscale,\n    theme,\n    enhance,\n    extract,\n    trim\n};\nexport { Effect, pixelate, deshake, boomerang, advancedRedEye, blackwhite, negate, redEye, reverse, accelerate, fadeIn, fadeOut, loop, makeTransparent, noise, vignette, blur, grayscale, sepia, shadow, colorize, oilPaint, artisticFilter, cartoonify, outline, styleTransfer, gradientFade, vectorize, assistColorBlind, simulateColorBlind, transition, dither, removeBackground, backgroundRemoval, dropShadow, generativeRemove, generativeReplace, generativeBackgroundReplace, generativeRecolor, generativeRestore, upscale, theme, enhance, extract, trim };\n"],
  "mappings": "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",
  "names": []
}
