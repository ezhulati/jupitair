---
import { generateCompleteSchema } from '../../lib/schema-generator';
import type { SchemaConfig } from '../../lib/schema-generator';

export interface Props {
  type: 'homepage' | 'city' | 'service' | 'city-service';
  city?: string;
  service?: string;
}

const { type, city, service } = Astro.props;

// Fetch reviews data - in production this would be from the API
// For build time, we'll use the static data but the API endpoint can be called client-side for updates
// Default review data to use during build time
const defaultReviewData = {
  averageRating: 4.9,
  totalReviews: 75,
  googleReviews: 47,
  facebookReviews: 28,
  reviews: [
    {
      author: "Sarah Mitchell",
      rating: 5,
      text: "Jupitair HVAC saved the day! Our AC went out during the hottest week of summer. They came out same day and had us cool again within hours.",
      date: "2024-08-10",
      source: "google"
    },
    {
      author: "Michael Chen",
      rating: 5,
      text: "Outstanding service from start to finish. The technician explained everything clearly and provided options without any pressure.",
      date: "2024-08-05",
      source: "google"
    },
    {
      author: "Jennifer Rodriguez",
      rating: 5,
      text: "I've used Jupitair for both my home and rental property. Always on time, professional, and reasonable prices.",
      date: "2024-07-28",
      source: "facebook"
    },
    {
      author: "David Thompson",
      rating: 5,
      text: "Emergency service at 2 AM - they actually answered and came out! Fixed our heating system quickly.",
      date: "2024-07-20",
      source: "google"
    },
    {
      author: "Lisa Anderson",
      rating: 5,
      text: "Best HVAC company in North Texas! They installed a new system and the energy savings have been incredible.",
      date: "2024-07-15",
      source: "facebook"
    }
  ]
};

let reviewData = defaultReviewData;

// Only try to fetch from API if we're not in build mode
if (!import.meta.env.SSR) {
  try {
    const response = await fetch('https://jupitairhvac.com/api/reviews-aggregator');
    if (response.ok) {
      reviewData = await response.json();
    }
  } catch (error) {
    console.log('Using default review data during build');
  }
}

const config: SchemaConfig = {
  type,
  city,
  service,
  reviews: reviewData
};

const schema = generateCompleteSchema(config);
---

<script type="application/ld+json" set:html={JSON.stringify(schema, null, 2)} />

<!-- Additional script to update schema dynamically after page load -->
<script>
  // Update schema with fresh review data after page load
  async function updateSchemaWithFreshReviews() {
    try {
      const response = await fetch('/api/reviews-aggregator');
      if (response.ok) {
        const freshReviews = await response.json();
        
        // Find and update the existing schema
        const schemaScript = document.querySelector('script[type="application/ld+json"]');
        if (schemaScript) {
          const currentSchema = JSON.parse(schemaScript.textContent);
          
          // Update the aggregateRating in the LocalBusiness schema
          if (currentSchema['@graph']) {
            const localBusiness = currentSchema['@graph'].find(s => s['@type'] === 'HVACBusiness');
            if (localBusiness && localBusiness.aggregateRating) {
              localBusiness.aggregateRating.ratingValue = freshReviews.averageRating.toString();
              localBusiness.aggregateRating.reviewCount = freshReviews.totalReviews.toString();
              
              // Update reviews
              if (localBusiness.review && freshReviews.reviews) {
                localBusiness.review = freshReviews.reviews.slice(0, 5).map(review => ({
                  "@type": "Review",
                  "reviewRating": {
                    "@type": "Rating",
                    "ratingValue": review.rating.toString(),
                    "bestRating": "5",
                    "worstRating": "1"
                  },
                  "author": {
                    "@type": "Person",
                    "name": review.author
                  },
                  "datePublished": review.date,
                  "reviewBody": review.text,
                  "publisher": {
                    "@type": "Organization",
                    "name": review.source === 'google' ? "Google" : "Facebook"
                  }
                }));
              }
              
              // Create new schema script
              const newSchemaScript = document.createElement('script');
              newSchemaScript.type = 'application/ld+json';
              newSchemaScript.textContent = JSON.stringify(currentSchema, null, 2);
              
              // Replace old with new
              schemaScript.parentNode.replaceChild(newSchemaScript, schemaScript);
              
              console.log('Schema updated with fresh review data:', {
                rating: freshReviews.averageRating,
                count: freshReviews.totalReviews
              });
            }
          }
        }
      }
    } catch (error) {
      console.error('Failed to update schema with fresh reviews:', error);
    }
  }
  
  // Update schema 5 seconds after page load to ensure fresh data
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
      setTimeout(updateSchemaWithFreshReviews, 5000);
    });
  } else {
    setTimeout(updateSchemaWithFreshReviews, 5000);
  }
  
  // Also update every hour if page stays open
  setInterval(updateSchemaWithFreshReviews, 3600000);
</script>