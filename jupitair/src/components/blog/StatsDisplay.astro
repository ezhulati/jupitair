---
/**
 * Professional Statistics Display Component for Jupitair HVAC Blog
 * Features: Animated counters, visual charts, professional design
 */

interface Stat {
  value: string | number;
  label: string;
  unit?: string;
  color?: 'blue' | 'green' | 'red' | 'yellow';
  icon?: string;
  description?: string;
}

interface Props {
  title?: string;
  stats: Stat[];
  layout?: 'grid' | 'horizontal' | 'vertical';
  animated?: boolean;
  className?: string;
}

const { 
  title = "Key Statistics",
  stats, 
  layout = 'grid',
  animated = true,
  className = '' 
} = Astro.props;

// Color mappings for stats
const colorClasses = {
  blue: {
    bg: 'bg-blue-50',
    border: 'border-blue-200',
    text: 'text-blue-700',
    number: 'text-blue-900',
    icon: 'text-blue-600'
  },
  green: {
    bg: 'bg-green-50',
    border: 'border-green-200',
    text: 'text-green-700',
    number: 'text-green-900',
    icon: 'text-green-600'
  },
  red: {
    bg: 'bg-red-50',
    border: 'border-red-200',
    text: 'text-red-700',
    number: 'text-red-900',
    icon: 'text-red-600'
  },
  yellow: {
    bg: 'bg-yellow-50',
    border: 'border-yellow-200',
    text: 'text-yellow-700',
    number: 'text-yellow-900',
    icon: 'text-yellow-600'
  }
};

// Layout classes
const layoutClasses = {
  grid: 'grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6',
  horizontal: 'flex flex-wrap gap-6',
  vertical: 'space-y-6'
};
---

<div class={`stats-display bg-white rounded-2xl border border-gray-200 p-8 shadow-lg ${className}`}>
  <!-- Title -->
  {title && (
    <div class="mb-8 text-center">
      <h3 class="text-2xl font-bold text-gray-900 mb-2">{title}</h3>
      <div class="w-16 h-1 bg-blue-600 mx-auto rounded-full"></div>
    </div>
  )}

  <!-- Stats Grid -->
  <div class={layoutClasses[layout]}>
    {stats.map((stat, index) => {
      const colors = colorClasses[stat.color || 'blue'];
      return (
        <div 
          class={`stat-card ${colors.bg} ${colors.border} border rounded-xl p-6 text-center transition-all duration-300 hover:shadow-md hover:-translate-y-1`}
          style={animated ? `animation-delay: ${index * 150}ms` : ''}
        >
          <!-- Icon -->
          {stat.icon && (
            <div class="mb-4">
              {stat.icon.startsWith('http') || stat.icon.startsWith('/') ? (
                <img src={stat.icon} alt="" class="w-8 h-8 mx-auto" />
              ) : (
                <div class={`w-12 h-12 ${colors.icon} mx-auto text-2xl flex items-center justify-center`}>
                  {stat.icon}
                </div>
              )}
            </div>
          )}

          <!-- Value -->
          <div class={`stat-value ${colors.number} text-3xl md:text-4xl font-bold mb-2`} data-value={stat.value}>
            {typeof stat.value === 'number' ? (
              <span class="counter" data-target={stat.value}>0</span>
            ) : (
              stat.value
            )}
            {stat.unit && <span class="text-xl ml-1">{stat.unit}</span>}
          </div>

          <!-- Label -->
          <div class={`stat-label ${colors.text} font-semibold text-sm uppercase tracking-wide mb-2`}>
            {stat.label}
          </div>

          <!-- Description -->
          {stat.description && (
            <p class="text-gray-600 text-xs leading-relaxed">
              {stat.description}
            </p>
          )}

          <!-- Visual accent -->
          <div class={`w-8 h-1 ${colors.icon} mx-auto mt-4 rounded-full bg-current opacity-30`}></div>
        </div>
      );
    })}
  </div>

  <!-- Trust indicators -->
  <div class="mt-8 pt-6 border-t border-gray-200">
    <div class="flex flex-wrap justify-center items-center gap-6 text-sm text-gray-600">
      <div class="flex items-center gap-2">
        <svg class="w-4 h-4 text-green-500" fill="currentColor" viewBox="0 0 20 20">
          <path fillRule="evenodd" d="M2.166 4.999A11.954 11.954 0 0010 1.944 11.954 11.954 0 0017.834 5c.11.65.166 1.32.166 2.001 0 5.225-3.34 9.67-8 11.317C5.34 16.67 2 12.225 2 7c0-.682.057-1.35.166-2.001zm11.541 3.708a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clipRule="evenodd"/>
        </svg>
        <span>Verified Data</span>
      </div>
      
      <div class="flex items-center gap-2">
        <svg class="w-4 h-4 text-blue-500" fill="currentColor" viewBox="0 0 20 20">
          <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm1-12a1 1 0 10-2 0v4a1 1 0 00.293.707l2.828 2.829a1 1 0 101.415-1.415L11 9.586V6z" clipRule="evenodd"/>
        </svg>
        <span>Updated {new Date().getFullYear()}</span>
      </div>
      
      <div class="flex items-center gap-2">
        <svg class="w-4 h-4 text-orange-500" fill="currentColor" viewBox="0 0 20 20">
          <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z"/>
        </svg>
        <span>Industry Leading</span>
      </div>
    </div>
  </div>
</div>

{animated && (
  <script>
    // Intersection Observer for animation on scroll
    if ('IntersectionObserver' in window) {
      const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
          if (entry.isIntersecting) {
            // Animate counters
            const counters = entry.target.querySelectorAll('.counter');
            counters.forEach(counter => {
              const target = parseInt(counter.dataset.target);
              const duration = 2000;
              const increment = target / (duration / 16);
              let current = 0;
              
              const updateCounter = () => {
                if (current < target) {
                  current += increment;
                  counter.textContent = Math.floor(current).toLocaleString();
                  requestAnimationFrame(updateCounter);
                } else {
                  counter.textContent = target.toLocaleString();
                }
              };
              
              updateCounter();
            });
            
            // Add entrance animation
            const statCards = entry.target.querySelectorAll('.stat-card');
            statCards.forEach((card, index) => {
              setTimeout(() => {
                card.style.opacity = '0';
                card.style.transform = 'translateY(20px)';
                card.style.transition = 'all 0.6s ease-out';
                
                requestAnimationFrame(() => {
                  card.style.opacity = '1';
                  card.style.transform = 'translateY(0)';
                });
              }, index * 150);
            });
            
            observer.unobserve(entry.target);
          }
        });
      }, { threshold: 0.2 });
      
      document.querySelectorAll('.stats-display').forEach(stats => {
        observer.observe(stats);
      });
    }
  </script>
)}

<style>
  .stats-display {
    background: linear-gradient(135deg, #ffffff 0%, #f8fafc 100%);
  }
  
  .stat-card {
    position: relative;
    overflow: hidden;
  }
  
  .stat-card::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    height: 3px;
    background: linear-gradient(90deg, transparent, currentColor, transparent);
    opacity: 0;
    transition: opacity 0.3s ease;
  }
  
  .stat-card:hover::before {
    opacity: 0.3;
  }
  
  .counter {
    font-variant-numeric: tabular-nums;
  }
  
  /* Animation keyframes */
  @keyframes fadeInUp {
    from {
      opacity: 0;
      transform: translateY(30px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
  
  .stat-card {
    animation: fadeInUp 0.6s ease-out both;
  }
  
  /* Mobile responsiveness */
  @media (max-width: 640px) {
    .stat-value {
      font-size: 2rem !important;
    }
  }
  
  /* Print styles */
  @media print {
    .stats-display {
      break-inside: avoid;
      background: white !important;
      border: 2px solid #000;
    }
    
    .stat-card {
      border: 1px solid #000 !important;
      background: white !important;
    }
  }
  
  /* High contrast mode */
  @media (prefers-contrast: high) {
    .stat-card {
      border-width: 2px;
    }
  }
  
  /* Reduced motion */
  @media (prefers-reduced-motion: reduce) {
    .stat-card {
      animation: none;
      transition: none;
    }
  }
</style>