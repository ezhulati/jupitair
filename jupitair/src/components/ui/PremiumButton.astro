---
export interface Props {
  variant?: 'primary' | 'emergency' | 'cooling' | 'heating' | 'secondary' | 'ghost' | 'outline' | 'success' | 'premium' | 'glass';
  size?: 'xs' | 'sm' | 'md' | 'lg' | 'xl';
  href?: string;
  type?: 'button' | 'submit' | 'reset';
  fullWidth?: boolean;
  loading?: boolean;
  disabled?: boolean;
  leftIcon?: string;
  rightIcon?: string;
  class?: string;
  id?: string;
  ariaLabel?: string;
  dataTracking?: string;
  ripple?: boolean;
}

const {
  variant = 'primary',
  size = 'md',
  href,
  type = 'button',
  fullWidth = false,
  loading = false,
  disabled = false,
  leftIcon,
  rightIcon,
  class: className = '',
  id,
  ariaLabel,
  dataTracking,
  ripple = true,
} = Astro.props;

const Tag = href ? 'a' : 'button';

const baseClasses = `
  premium-btn
  relative inline-flex items-center justify-center gap-2
  font-semibold tracking-tight transition-all duration-200
  transform-gpu will-change-transform
  overflow-hidden isolate
  disabled:opacity-50 disabled:cursor-not-allowed
  focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-offset-2
  active:scale-[0.98]
`;

const variantClasses = {
  primary: `
    bg-gradient-to-r from-blue-600 to-blue-700
    text-white shadow-lg shadow-blue-600/25
    hover:from-blue-700 hover:to-blue-800 hover:shadow-xl hover:shadow-blue-600/30
    focus-visible:ring-blue-600
    border border-blue-700
    before:absolute before:inset-0 before:bg-gradient-to-r before:from-blue-400 before:to-blue-500
    before:opacity-0 before:transition-opacity before:duration-300 hover:before:opacity-20
  `,
  emergency: `
    bg-gradient-to-r from-red-600 to-red-700
    text-white shadow-lg shadow-red-600/25
    hover:from-red-700 hover:to-red-800 hover:shadow-xl hover:shadow-red-600/30
    focus-visible:ring-red-600
    border border-red-700
    emergency-pulse
    before:absolute before:inset-0 before:bg-gradient-to-r before:from-red-400 before:to-red-500
    before:opacity-0 before:transition-opacity before:duration-300 hover:before:opacity-20
  `,
  cooling: `
    bg-gradient-to-r from-cyan-500 to-cyan-600
    text-white shadow-lg shadow-cyan-500/25
    hover:from-cyan-600 hover:to-cyan-700 hover:shadow-xl hover:shadow-cyan-500/30
    focus-visible:ring-cyan-500
    border border-cyan-600
    before:absolute before:inset-0 before:bg-gradient-to-r before:from-cyan-300 before:to-cyan-400
    before:opacity-0 before:transition-opacity before:duration-300 hover:before:opacity-20
  `,
  heating: `
    bg-gradient-to-r from-orange-500 to-orange-600
    text-white shadow-lg shadow-orange-500/25
    hover:from-orange-600 hover:to-orange-700 hover:shadow-xl hover:shadow-orange-500/30
    focus-visible:ring-orange-500
    border border-orange-600
    before:absolute before:inset-0 before:bg-gradient-to-r before:from-orange-300 before:to-orange-400
    before:opacity-0 before:transition-opacity before:duration-300 hover:before:opacity-20
  `,
  secondary: `
    bg-white dark:bg-gray-800
    text-gray-900 dark:text-gray-100
    border-2 border-gray-200 dark:border-gray-700
    hover:bg-gray-50 dark:hover:bg-gray-700
    hover:border-gray-300 dark:hover:border-gray-600
    focus-visible:ring-gray-400
    shadow-sm hover:shadow-md
  `,
  ghost: `
    bg-transparent
    text-gray-700 dark:text-gray-300
    hover:bg-gray-100 dark:hover:bg-gray-800
    hover:text-gray-900 dark:hover:text-gray-100
    focus-visible:ring-gray-400
  `,
  outline: `
    bg-transparent
    border-2 border-blue-600 dark:border-blue-400
    text-blue-600 dark:text-blue-400
    hover:bg-blue-50 dark:hover:bg-blue-950
    hover:border-blue-700 dark:hover:border-blue-300
    hover:text-blue-700 dark:hover:text-blue-300
    focus-visible:ring-blue-600
  `,
  success: `
    bg-gradient-to-r from-green-600 to-green-700
    text-white shadow-lg shadow-green-600/25
    hover:from-green-700 hover:to-green-800 hover:shadow-xl hover:shadow-green-600/30
    focus-visible:ring-green-600
    border border-green-700
    before:absolute before:inset-0 before:bg-gradient-to-r before:from-green-400 before:to-green-500
    before:opacity-0 before:transition-opacity before:duration-300 hover:before:opacity-20
  `,
  premium: `
    bg-white
    text-primary-700 font-bold
    border-2 border-primary-200
    shadow-xl shadow-primary-100/50
    hover:bg-primary-50 hover:text-primary-800
    hover:border-primary-300 hover:shadow-2xl hover:shadow-primary-200/50
    focus-visible:ring-primary-600
    transition-all duration-300
    before:absolute before:inset-0 before:bg-gradient-to-r before:from-primary-100 before:to-primary-50
    before:opacity-0 before:transition-opacity before:duration-300 hover:before:opacity-100
  `,
  glass: `
    bg-white/10 backdrop-blur-md
    text-white font-bold
    border-2 border-white/30
    shadow-lg shadow-black/10
    hover:bg-white/20 hover:border-white/50
    hover:shadow-xl hover:shadow-black/20
    focus-visible:ring-white/50
    transition-all duration-300
  `,
};

const sizeClasses = {
  xs: 'h-8 px-4 text-xs rounded-lg',
  sm: 'h-10 px-6 text-sm rounded-lg',
  md: 'h-12 px-8 text-base rounded-lg',
  lg: 'h-14 px-10 text-lg rounded-xl',
  xl: 'h-16 px-12 text-xl rounded-xl',
};

const iconSizeClasses = {
  xs: 'w-3 h-3',
  sm: 'w-4 h-4',
  md: 'w-5 h-5',
  lg: 'w-6 h-6',
  xl: 'w-7 h-7',
};

const fullWidthClass = fullWidth ? 'w-full' : 'w-auto';
const loadingClass = loading ? 'cursor-wait' : '';

const classes = [
  baseClasses,
  variantClasses[variant],
  sizeClasses[size],
  fullWidthClass,
  loadingClass,
  className,
].join(' ');
---

<Tag
  class={classes}
  href={href}
  type={!href ? type : undefined}
  disabled={disabled || loading}
  id={id}
  aria-label={ariaLabel}
  data-tracking={dataTracking}
  data-ripple={ripple}
>
  {/* Ripple Effect Container */}
  {ripple && (
    <span class="ripple-container absolute inset-0 overflow-hidden rounded-inherit pointer-events-none"></span>
  )}

  {/* Shimmer Effect */}
  <span class="absolute inset-0 -top-[2px] h-[2px] bg-gradient-to-r from-transparent via-white/50 to-transparent opacity-0 transition-opacity duration-500 group-hover:opacity-100 shimmer-effect"></span>

  {/* Loading Spinner */}
  {loading && (
    <svg
      class="animate-spin mr-2 {iconSizeClasses[size]}"
      xmlns="http://www.w3.org/2000/svg"
      fill="none"
      viewBox="0 0 24 24"
    >
      <circle
        class="opacity-25"
        cx="12"
        cy="12"
        r="10"
        stroke="currentColor"
        stroke-width="4"
      ></circle>
      <path
        class="opacity-75"
        fill="currentColor"
        d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
      ></path>
    </svg>
  )}

  {/* Button Content */}
  <span class="relative z-10 flex items-center gap-2">
    {!loading && leftIcon && (
      <svg class={iconSizeClasses[size]} fill="currentColor" viewBox="0 0 20 20">
        <Fragment set:html={leftIcon} />
      </svg>
    )}
    <slot />
    {!loading && rightIcon && (
      <svg class={iconSizeClasses[size]} fill="currentColor" viewBox="0 0 20 20">
        <Fragment set:html={rightIcon} />
      </svg>
    )}
  </span>
</Tag>

<style>
  @keyframes ripple {
    0% {
      transform: scale(0);
      opacity: 1;
    }
    100% {
      transform: scale(4);
      opacity: 0;
    }
  }

  @keyframes shimmer {
    0% {
      transform: translateX(-100%);
    }
    100% {
      transform: translateX(100%);
    }
  }

  @keyframes emergency-pulse {
    0%, 100% {
      box-shadow: 0 0 0 0 rgba(220, 38, 38, 0.4);
    }
    50% {
      box-shadow: 0 0 0 20px rgba(220, 38, 38, 0);
    }
  }

  .emergency-pulse {
    animation: emergency-pulse 2s infinite;
  }

  .shimmer-effect {
    animation: shimmer 3s infinite;
  }

  .premium-btn {
    position: relative;
    text-rendering: optimizeLegibility;
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
  }

  .premium-btn::after {
    content: '';
    position: absolute;
    inset: 0;
    border-radius: inherit;
    opacity: 0;
    transition: opacity 0.3s ease;
    background: radial-gradient(circle at center, white, transparent);
    pointer-events: none;
  }

  .premium-btn:hover::after {
    opacity: 0.1;
  }

  .rounded-inherit {
    border-radius: inherit;
  }

  /* Ripple styles added via JavaScript */
  .ripple {
    position: absolute;
    border-radius: 50%;
    background: rgba(255, 255, 255, 0.5);
    transform: scale(0);
    animation: ripple 600ms ease-out;
    pointer-events: none;
  }
</style>

<script>
  // Ripple Effect Implementation
  document.addEventListener('DOMContentLoaded', () => {
    const buttons = document.querySelectorAll('.premium-btn[data-ripple="true"]');
    
    buttons.forEach((button) => {
      button.addEventListener('click', function(e) {
        const rippleContainer = this.querySelector('.ripple-container');
        if (!rippleContainer) return;
        
        const rect = this.getBoundingClientRect();
        const size = Math.max(rect.width, rect.height);
        const x = e.clientX - rect.left - size / 2;
        const y = e.clientY - rect.top - size / 2;
        
        const ripple = document.createElement('span');
        ripple.classList.add('ripple');
        ripple.style.width = ripple.style.height = size + 'px';
        ripple.style.left = x + 'px';
        ripple.style.top = y + 'px';
        
        rippleContainer.appendChild(ripple);
        
        setTimeout(() => {
          ripple.remove();
        }, 600);
      });
    });
  });

  // Add haptic feedback on mobile devices
  if ('vibrate' in navigator) {
    document.querySelectorAll('.premium-btn').forEach((button) => {
      button.addEventListener('touchstart', () => {
        navigator.vibrate(10);
      });
    });
  }
</script>