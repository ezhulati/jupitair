---
export interface Props {
  variant?: 'primary' | 'secondary' | 'emergency' | 'outline' | 'ghost';
  size?: 'sm' | 'md' | 'lg' | 'xl';
  href?: string;
  type?: 'button' | 'submit' | 'reset';
  disabled?: boolean;
  class?: string;
  [key: string]: any;
}

const {
  variant = 'primary',
  size = 'md',
  href,
  type = 'button',
  disabled = false,
  class: className = '',
  ...rest
} = Astro.props;

const baseClasses = 'inline-flex items-center justify-center font-semibold rounded-lg transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed select-none whitespace-nowrap';

const variantClasses = {
  primary: 'btn-primary focus:ring-primary-500 shadow-md hover:shadow-lg',
  secondary: 'btn-secondary focus:ring-secondary-500 shadow-md hover:shadow-lg',
  emergency: 'btn-emergency focus:ring-emergency-500 shadow-md hover:shadow-lg animate-pulse-slow',
  outline: 'btn-outline focus:ring-primary-500 shadow-sm hover:shadow-md transition-all duration-200',
  ghost: 'text-primary-600 hover:bg-primary-50 hover:text-primary-700 focus:ring-primary-500'
};

const sizeClasses = {
  sm: 'px-6 py-2.5 text-sm min-h-[40px]',
  md: 'px-8 py-3 text-base min-h-[48px]',
  lg: 'px-10 py-3.5 text-lg min-h-[56px]',
  xl: 'px-12 py-4 text-xl min-h-[64px]'
};

const classes = `${baseClasses} ${variantClasses[variant]} ${sizeClasses[size]} ${className}`.trim();

const Tag = href ? 'a' : 'button';
const props = href ? { href, ...rest } : { type, disabled, ...rest };
---

<Tag class={classes} {...props}>
  <slot />
</Tag>