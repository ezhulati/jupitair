---
export interface Props {
  currentPath?: string;
}

const { currentPath = '/' } = Astro.props;

const navItems = [
  { label: 'Services', href: '/services', icon: 'services' },
  { label: 'Areas', href: '/areas', icon: 'location' },
  { label: 'Emergency', href: 'tel:9403905676', icon: 'emergency', highlight: true },
  { label: 'Quote', href: '#contact', icon: 'quote' },
  { label: 'Menu', href: '#menu', icon: 'menu' },
];
---

<!-- Premium Mobile Navigation with Gesture Support -->
<nav class="mobile-nav lg:hidden fixed bottom-0 left-0 right-0 z-[55]">
  <!-- Gesture Handle -->
  <div class="min-w-0 gesture-handle absolute -top-6 left-0 right-0 h-6 flex items-center justify-center">
    <div class="w-12 h-1 bg-gray-400 rounded-full opacity-50"></div>
  </div>

  <!-- Navigation Bar -->
  <div class="max-w-7xl overflow-x-hidden nav-container bg-white/95 backdrop-blur-xl border-t border-gray-200">
    <div class="min-w-0 grid grid-cols-5 relative">
      {navItems.map((item, index) => (
        <a
          href={item.href}
          class={`
            nav-item relative flex flex-col items-center justify-center py-2 px-1
            transition-all duration-200 
            ${item.highlight ? 'nav-item-emergency' : ''}
            ${currentPath === item.href ? 'nav-item-active' : ''}
          `}
          data-index={index}
          aria-label={item.label}
        >
          <!-- Ripple Container -->
          <span class="ripple-container absolute inset-0 overflow-hidden"></span>
          
          <!-- Icon -->
          <div class={`nav-icon relative z-10 w-6 h-6 mb-1 ${item.highlight ? 'animate-pulse' : ''}`}>
            {item.icon === 'services' && (
              <svg fill="currentColor" viewBox="0 0 24 24" aria-hidden="true">
                <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"/>
              </svg>
            )}
            {item.icon === 'location' && (
              <svg fill="none" stroke="currentColor" viewBox="0 0 24 24" aria-hidden="true">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z" />
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z" />
              </svg>
            )}
            {item.icon === 'emergency' && (
              <svg fill="currentColor" viewBox="0 0 24 24" class="text-red-600" aria-hidden="true">
                <path d="M20.79 9.23l-2-3.46-1.5.87V2h-4v3.36l-1.29-.75-1.29.75V2h-4v4.64l-1.5-.87-2 3.46L5.21 10 3 13h6v8h6v-8h6l-2.21-3-.79-.77zM11 19H9v-6H5.5l1.29-1.92L5.5 9.65l.66-1.15.84.49V4h2v5.48l1.29-.74L12 9.87l1.71-1.13L15 9.48V4h2v5l.84-.49.66 1.15-1.29 1.43L18.5 13H15v6h-2v-6h-2v6z"/>
              </svg>
            )}
            {item.icon === 'quote' && (
              <svg fill="none" stroke="currentColor" viewBox="0 0 24 24" aria-hidden="true">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
              </svg>
            )}
            {item.icon === 'menu' && (
              <svg fill="none" stroke="currentColor" viewBox="0 0 24 24" aria-hidden="true">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
              </svg>
            )}
          </div>
          
          <!-- Label -->
          <span class={`nav-label relative z-10 text-xs ${item.highlight ? 'font-bold' : 'font-medium'}`}>
            {item.label}
          </span>
          
          <!-- Active Indicator -->
          {currentPath === item.href && (
            <span class="active-indicator absolute top-0 left-1/2 transform -translate-x-1/2 w-8 h-0.5 bg-blue-600 rounded-full"></span>
          )}
          
          <!-- Emergency Badge -->
          {item.highlight && (
            <span class="min-w-0 absolute -top-1 -right-1 flex h-3 w-3">
              <span class="min-w-0 animate-ping absolute inline-flex h-full w-full rounded-full bg-red-400 opacity-75"></span>
              <span class="min-w-0 relative inline-flex rounded-full h-3 w-3 bg-red-500"></span>
            </span>
          )}
        </a>
      ))}
      
      <!-- Sliding Indicator -->
      <div class="sliding-indicator absolute bottom-0 h-0.5 bg-blue-600 transition-all duration-300"></div>
    </div>
  </div>
</nav>

<!-- Swipe-Up Menu -->
<div id="mobile-menu" class="mobile-menu fixed inset-0 z-[60] pointer-events-none">
  <div class="menu-backdrop absolute inset-0 bg-black/50 opacity-0 transition-opacity duration-300"></div>
  <div class="menu-panel absolute bottom-0 left-0 right-0 bg-white dark:bg-gray-900 rounded-t-3xl transform translate-y-full transition-transform duration-300 max-h-[80vh] overflow-y-auto">
    <!-- Drag Handle -->
    <div class="drag-handle py-4 cursor-grab active:cursor-grabbing">
      <div class="w-12 h-1 bg-gray-300 dark:bg-gray-700 rounded-full mx-auto"></div>
    </div>
    
    <!-- Menu Content -->
    <div class="px-6 pb-24">
      <!-- Quick Actions -->
      <div class="mb-8">
        <h3 class="text-sm font-semibold text-gray-500 dark:text-gray-400 uppercase tracking-wider mb-4">Quick Actions</h3>
        <div class="min-w-0 grid grid-cols-2 gap-3">
          <a href="tel:9403905676" class="min-w-0 quick-action-card bg-red-50 dark:bg-red-950/20 border border-red-200 dark:border-red-800 rounded-xl p-4 flex items-center gap-3">
            <div class="min-w-0 w-10 h-10 bg-red-600 rounded-lg flex items-center justify-center">
              <svg class="w-5 h-5 text-white" fill="currentColor" viewBox="0 0 20 20" aria-hidden="true">
                <path d="M2 3a1 1 0 011-1h2.153a1 1 0 01.986.836l.74 4.435a1 1 0 01-.54 1.06l-1.548.773a11.037 11.037 0 006.105 6.105l.774-1.548a1 1 0 011.059-.54l4.435.74a1 1 0 01.836.986V17a1 1 0 01-1 1h-2C7.82 18 2 12.18 2 5V3z" />
              </svg>
            </div>
            <div>
              <div class="font-semibold text-red-900 dark:text-white/90">Emergency</div>
              <div class="text-xs text-red-700 dark:text-red-300">24/7 Service</div>
            </div>
          </a>
          
          <a href="#contact" class="min-w-0 quick-action-card bg-blue-50 dark:bg-blue-950/20 border border-blue-200 dark:border-blue-800 rounded-xl p-4 flex items-center gap-3">
            <div class="min-w-0 w-10 h-10 bg-blue-600 rounded-lg flex items-center justify-center">
              <svg class="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24" aria-hidden="true">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
              </svg>
            </div>
            <div>
              <div class="font-semibold text-blue-900 dark:text-blue-100">Schedule</div>
              <div class="text-xs text-blue-700 dark:text-blue-300">Book Online</div>
            </div>
          </a>
        </div>
      </div>
      
      <!-- Services Menu -->
      <div class="mb-8">
        <h3 class="text-sm font-semibold text-gray-500 dark:text-gray-400 uppercase tracking-wider mb-4">Services</h3>
        <div class="space-y-2">
          {[
            'AC Repair',
            'Heating Repair',
            'HVAC Installation',
            'Emergency Service',
            'Maintenance Plans',
            'Indoor Air Quality'
          ].map((service) => (
            <a href={`/services/${service.toLowerCase().replace(' ', '-')}`} class="min-w-0 menu-item flex items-center justify-between py-3 px-4 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-800 transition-colors">
              <span class="font-medium">{service}</span>
              <svg class="w-5 h-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24" aria-hidden="true">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
              </svg>
            </a>
          ))}
        </div>
      </div>
      
      <!-- Service Areas -->
      <div class="mb-8">
        <h3 class="text-sm font-semibold text-gray-500 dark:text-gray-400 uppercase tracking-wider mb-4">Service Areas</h3>
        <div class="min-w-0 grid grid-cols-2 gap-2">
          {[
            'Frisco',
            'Plano',
            'McKinney',
            'Allen',
            'Prosper',
            'The Colony',
            'Little Elm',
            'Addison'
          ].map((city) => (
            <a href={`/${city.toLowerCase().replace(' ', '-')}`} class="py-2 px-3 text-center rounded-lg hover:bg-gray-100 dark:hover:bg-gray-800 transition-colors">
              {city}
            </a>
          ))}
        </div>
      </div>
      
      <!-- Contact Info -->
      <div class="border-t border-gray-200 dark:border-gray-800 pt-6">
        <div class="min-w-0 flex items-center justify-between mb-4">
          <div>
            <div class="text-sm text-gray-500 dark:text-gray-400">Available 24/7</div>
            <div class="text-lg font-bold">Call Now</div>
          </div>
          <a href="tel:9403905676" class="min-w-0 w-12 h-12 bg-green-600 rounded-full flex items-center justify-center">
            <svg class="w-6 h-6 text-white" fill="currentColor" viewBox="0 0 20 20" aria-hidden="true">
              <path d="M2 3a1 1 0 011-1h2.153a1 1 0 01.986.836l.74 4.435a1 1 0 01-.54 1.06l-1.548.773a11.037 11.037 0 006.105 6.105l.774-1.548a1 1 0 011.059-.54l4.435.74a1 1 0 01.836.986V17a1 1 0 01-1 1h-2C7.82 18 2 12.18 2 5V3z" />
            </svg>
          </a>
        </div>
      </div>
    </div>
  </div>
</div>

<style>
  .mobile-nav {
    contain: layout style;
    -webkit-user-select: none;
    user-select: none;
    -webkit-touch-callout: none;
  }

  .nav-container {
    padding-bottom: env(safe-area-inset-bottom);
  }

  .nav-item {
    -webkit-tap-highlight-color: transparent;
    position: relative;
    overflow: hidden;
  }

  .nav-item-emergency {
    color: #dc2626;
  }

  .nav-item-active {
    color: #2563eb;
  }

  .nav-item:active {
    transform: scale(0.95);
  }

  /* Ripple Effect */
  @keyframes ripple {
    0% {
      transform: scale(0);
      opacity: 0.5;
    }
    100% {
      transform: scale(4);
      opacity: 0;
    }
  }

  .ripple {
    position: absolute;
    border-radius: 50%;
    background: rgba(255, 255, 255, 0.6);
    animation: ripple 0.6s ease-out;
    pointer-events: none;
  }

  /* Menu Panel */
  .mobile-menu.active {
    pointer-events: auto;
  }

  .mobile-menu.active .menu-backdrop {
    opacity: 1;
  }

  .mobile-menu.active .menu-panel {
    transform: translateY(0);
  }

  /* Smooth iOS-style scrolling */
  .menu-panel {
    -webkit-overflow-scrolling: touch;
    overscroll-behavior-y: contain;
  }

  /* Prevent body scroll when menu is open */
  body.menu-open {
    overflow: hidden;
    position: fixed;
    width: 100%;
  }

  /* Quick Action Cards */
  .quick-action-card {
    transition: all 0.2s ease;
    -webkit-tap-highlight-color: transparent;
  }

  .quick-action-card:active {
    transform: scale(0.98);
  }

  /* Sliding Indicator Animation */
  .sliding-indicator {
    width: 20%;
    left: 0;
    transition: left 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  }

  /* Haptic Feedback Styles */
  @media (hover: none) and (pointer: coarse) {
    .nav-item:active {
      background: rgba(0, 0, 0, 0.05);
    }
  }

  /* Dark mode adjustments */
  @media (prefers-color-scheme: dark) {
    .nav-item:active {
      background: rgba(255, 255, 255, 0.05);
    }
    
    .ripple {
      background: rgba(255, 255, 255, 0.3);
    }
  }

  /* Landscape mode adjustments */
  @media (orientation: landscape) and (max-height: 500px) {
    .menu-panel {
      max-height: 90vh;
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const mobileMenu = document.getElementById('mobile-menu');
    const menuPanel = mobileMenu?.querySelector('.menu-panel');
    const menuBackdrop = mobileMenu?.querySelector('.menu-backdrop');
    const navItems = document.querySelectorAll('.nav-item');
    const slidingIndicator = document.querySelector('.sliding-indicator');
    
    // Touch gesture variables
    let startY = 0;
    let currentY = 0;
    let isDragging = false;
    
    // Ripple effect
    navItems.forEach((item) => {
      item.addEventListener('click', function(e) {
        // Haptic feedback for mobile
        if ('vibrate' in navigator) {
          navigator.vibrate(10);
        }
        
        // Create ripple
        const rippleContainer = this.querySelector('.ripple-container');
        const ripple = document.createElement('span');
        ripple.classList.add('ripple');
        
        const rect = this.getBoundingClientRect();
        const size = Math.max(rect.width, rect.height);
        const x = e.clientX - rect.left - size / 2;
        const y = e.clientY - rect.top - size / 2;
        
        ripple.style.width = ripple.style.height = size + 'px';
        ripple.style.left = x + 'px';
        ripple.style.top = y + 'px';
        
        rippleContainer?.appendChild(ripple);
        
        setTimeout(() => {
          ripple.remove();
        }, 600);
        
        // Update sliding indicator
        const index = parseInt(this.dataset.index || '0');
        updateSlidingIndicator(index);
      });
    });
    
    // Update sliding indicator position
    function updateSlidingIndicator(index: number) {
      if (slidingIndicator) {
        slidingIndicator.style.left = `${index * 20}%`;
      }
    }
    
    // Menu toggle
    document.querySelector('[href="#menu"]')?.addEventListener('click', (e) => {
      e.preventDefault();
      openMenu();
    });
    
    menuBackdrop?.addEventListener('click', closeMenu);
    
    function openMenu() {
      mobileMenu?.classList.add('active');
      document.body.classList.add('menu-open');
      
      // Haptic feedback
      if ('vibrate' in navigator) {
        navigator.vibrate(20);
      }
    }
    
    function closeMenu() {
      mobileMenu?.classList.remove('active');
      document.body.classList.remove('menu-open');
    }
    
    // Swipe gestures for menu
    const dragHandle = menuPanel?.querySelector('.drag-handle');
    
    dragHandle?.addEventListener('touchstart', (e: TouchEvent) => {
      startY = e.touches[0].clientY;
      isDragging = true;
      menuPanel.style.transition = 'none';
    });
    
    dragHandle?.addEventListener('touchmove', (e: TouchEvent) => {
      if (!isDragging) return;
      
      currentY = e.touches[0].clientY;
      const deltaY = currentY - startY;
      
      if (deltaY > 0) {
        menuPanel.style.transform = `translateY(${deltaY}px)`;
      }
    });
    
    dragHandle?.addEventListener('touchend', () => {
      if (!isDragging) return;
      
      isDragging = false;
      menuPanel.style.transition = 'transform 0.3s ease';
      
      const deltaY = currentY - startY;
      
      if (deltaY > 100) {
        closeMenu();
      } else {
        menuPanel.style.transform = 'translateY(0)';
      }
    });
    
    // Pull-to-refresh prevention
    let lastY = 0;
    
    document.addEventListener('touchstart', (e) => {
      lastY = e.touches[0].clientY;
    }, { passive: false });
    
    document.addEventListener('touchmove', (e) => {
      const currentY = e.touches[0].clientY;
      const isScrollingUp = currentY > lastY;
      const isAtTop = window.scrollY === 0;
      
      if (isScrollingUp && isAtTop) {
        e.preventDefault();
      }
      
      lastY = currentY;
    }, { passive: false });
    
    // Smooth scroll for anchor links
    document.querySelectorAll('a[href^="#"]').forEach(anchor => {
      anchor.addEventListener('click', function (e) {
        if (this.getAttribute('href') === '#menu') return;
        
        e.preventDefault();
        const target = document.querySelector(this.getAttribute('href'));
        
        if (target) {
          closeMenu();
          setTimeout(() => {
            target.scrollIntoView({
              behavior: 'smooth',
              block: 'start'
            });
          }, 300);
        }
      });
    });
    
    // Active state based on scroll position
    const sections = document.querySelectorAll('section[id]');
    const observerOptions = {
      rootMargin: '-50% 0px -50% 0px'
    };
    
    const observer = new IntersectionObserver((entries) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          const id = entry.target.id;
          navItems.forEach((item, index) => {
            if (item.getAttribute('href') === `#${id}`) {
              updateSlidingIndicator(index);
            }
          });
        }
      });
    }, observerOptions);
    
    sections.forEach((section) => {
      observer.observe(section);
    });
  });
</script>