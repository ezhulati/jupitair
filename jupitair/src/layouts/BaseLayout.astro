---
export interface Props {
  title: string;
  description?: string;
  keywords?: string;
  canonical?: string;
  noindex?: boolean;
  schema?: object;
  ogImage?: string;
  city?: string;
  service?: string;
  overlayHeader?: boolean;
}

const {
  title,
  description = 'Professional HVAC services in North Texas. AC repair, heating repair, HVAC installation, and emergency service. Licensed technicians serving Frisco, Plano, McKinney, Allen, Prosper, The Colony, Little Elm, and Addison.',
  keywords = 'HVAC, AC repair, heating repair, HVAC installation, North Texas, Frisco, Plano, McKinney, Allen, emergency HVAC',
  canonical,
  noindex = false,
  schema,
  ogImage,
  city,
  service,
  overlayHeader = false
} = Astro.props;

import Header from '../components/layout/Header.astro';
import Footer from '../components/layout/Footer.astro';
import GoogleAnalytics from '../components/analytics/GoogleAnalytics.astro';
import criticalCSS from '../styles/critical.css?raw';
import '../styles/global.css';
import '../styles/tokens.css';
import '../styles/design-system.css';
import '../styles/spacing-system.css';
import '../styles/enterprise-spacing.css';
import '../styles/mobile-fixes.css';
import '../styles/contained-design.css';
import '../styles/header-offset.css';

// Generate base schema for every page
const baseSchema = {
  "@context": "https://schema.org",
  "@type": "LocalBusiness",
  "name": "Jupitair HVAC",
  "image": "https://jupitairhvac.com/logo.png",
  "description": "Professional HVAC services throughout North Texas",
  "url": "https://jupitairhvac.com",
  "telephone": "(940) 390-5676",
  "priceRange": "$$",
  "address": {
    "@type": "PostalAddress",
    "streetAddress": "5760 Legacy Dr B3-501",
    "addressLocality": "Plano",
    "addressRegion": "TX",
    "postalCode": "75024",
    "addressCountry": "US"
  },
  "geo": {
    "@type": "GeoCoordinates",
    "latitude": 33.0198,
    "longitude": -96.6989
  },
  "openingHoursSpecification": [
    {
      "@type": "OpeningHoursSpecification",
      "dayOfWeek": ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday"],
      "opens": "08:00",
      "closes": "18:00"
    },
    {
      "@type": "OpeningHoursSpecification",
      "dayOfWeek": "Saturday",
      "opens": "08:00",
      "closes": "16:00"
    }
  ],
  "areaServed": [
    {
      "@type": "City",
      "name": "Frisco",
      "addressRegion": "TX"
    },
    {
      "@type": "City",
      "name": "Plano",
      "addressRegion": "TX"
    },
    {
      "@type": "City",
      "name": "McKinney",
      "addressRegion": "TX"
    },
    {
      "@type": "City",
      "name": "Allen",
      "addressRegion": "TX"
    },
    {
      "@type": "City",
      "name": "Prosper",
      "addressRegion": "TX"
    },
    {
      "@type": "City",
      "name": "The Colony",
      "addressRegion": "TX"
    },
    {
      "@type": "City",
      "name": "Little Elm",
      "addressRegion": "TX"
    },
    {
      "@type": "City",
      "name": "Addison",
      "addressRegion": "TX"
    }
  ],
  "hasOfferCatalog": {
    "@type": "OfferCatalog",
    "name": "HVAC Services",
    "itemListElement": [
      {
        "@type": "Offer",
        "itemOffered": {
          "@type": "Service",
          "name": "AC Repair",
          "description": "Professional air conditioning repair services"
        }
      },
      {
        "@type": "Offer",
        "itemOffered": {
          "@type": "Service",
          "name": "Heating Repair",
          "description": "Expert heating system repair and maintenance"
        }
      },
      {
        "@type": "Offer",
        "itemOffered": {
          "@type": "Service",
          "name": "HVAC Installation",
          "description": "Complete HVAC system installation and replacement"
        }
      }
    ]
  }
};

// Merge custom schema with base schema if provided
const finalSchema = schema ? { ...baseSchema, ...schema } : baseSchema;
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content={description} />
    <meta name="keywords" content={keywords} />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=5.0, user-scalable=yes, viewport-fit=cover" />
    <meta name="theme-color" content="#2563eb" />
    <!-- Favicons for all platforms -->
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <link rel="icon" type="image/x-icon" href="/favicon.ico" />
    <link rel="icon" type="image/png" sizes="16x16" href="/favicon-16x16.png" />
    <link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png" />
    <link rel="icon" type="image/png" sizes="48x48" href="/favicon-48x48.png" />
    <link rel="icon" type="image/png" sizes="64x64" href="/favicon-64x64.png" />
    <link rel="icon" type="image/png" sizes="96x96" href="/favicon-96x96.png" />
    <link rel="icon" type="image/png" sizes="128x128" href="/favicon-128x128.png" />
    <link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png" />
    <link rel="manifest" href="/manifest.json" />
    <meta name="theme-color" content="#2563eb" />
    <meta name="generator" content={Astro.generator} />
    
    <!-- SEO Meta Tags -->
    <title>{title}</title>
    <meta name="description" content={description} />
    {canonical && <link rel="canonical" href={canonical} />}
    {noindex && <meta name="robots" content="noindex, nofollow" />}
    
    <!-- Open Graph -->
    <meta property="og:type" content="website" />
    <meta property="og:url" content={canonical || "https://jupitairhvac.com"} />
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:site_name" content="Jupitair HVAC" />
    <meta property="og:locale" content="en_US" />
    <meta property="og:image" content={ogImage ? (ogImage.startsWith('http') ? ogImage : `https://jupitairhvac.com${ogImage}`) : `https://jupitairhvac.com/og-images/${city && service ? `${city.toLowerCase().replace(' ', '-')}-${service}` : city ? city.toLowerCase().replace(' ', '-') : service ? `services-${service}` : canonical ? canonical.replace('https://jupitairhvac.com/', '').replace(/\//g, '-') || 'default' : 'default'}.jpg`} />
    <meta property="og:image:width" content="1200" />
    <meta property="og:image:height" content="630" />
    <meta property="og:image:alt" content={title} />
    <meta property="og:image:type" content="image/jpeg" />
    
    <!-- Twitter Card -->
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:title" content={title} />
    <meta name="twitter:description" content={description} />
    <meta name="twitter:image" content={ogImage ? (ogImage.startsWith('http') ? ogImage : `https://jupitairhvac.com${ogImage}`) : `https://jupitairhvac.com/og-images/${city && service ? `${city.toLowerCase().replace(' ', '-')}-${service}` : city ? city.toLowerCase().replace(' ', '-') : service ? `services-${service}` : canonical ? canonical.replace('https://jupitairhvac.com/', '').replace(/\//g, '-') || 'default' : 'default'}.jpg`} />
    <meta name="twitter:image:alt" content={title} />
    
    <!-- Structured Data Schema -->
    <script type="application/ld+json" set:html={JSON.stringify(finalSchema)} />
    
    <!-- Critical CSS inline for instant render -->
    <style set:html={criticalCSS} />
    
    <!-- Fonts - Optimized loading -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link rel="preload" as="style" href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap">
    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" media="print" onload="this.media='all'">
    <noscript>
      <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap">
    </noscript>
    
    <!-- Analytics -->
    <GoogleAnalytics 
      trackingId={import.meta.env.PUBLIC_GA4_ID || "G-2X9H3CR9V3"} 
      clarityId={import.meta.env.PUBLIC_CLARITY_ID || "sxdxl6n9iu"} 
    />
  </head>
  <body class="font-sans bg-gray-50 text-gray-900" data-city={city} data-service={service}>
    <!-- Skip to main content -->
    <a href="#main-content" class="sr-only focus:not-sr-only focus:absolute focus:top-4 focus:left-4 bg-primary-600 text-white px-4 py-2 rounded-md z-[999999]">
      Skip to main content
    </a>
    
    <Header overlay={overlayHeader} />
    
    <!-- Main content - padding handled by contained-design.css -->
    <main id="main-content" class="header-offset">
      <slot />
    </main>
    
    <Footer />
    
    <!-- After-hours detection script -->
    <script>
      // After-hours detection for emergency pricing
      function isAfterHours() {
        const now = new Date();
        const centralTime = new Date(now.toLocaleString("en-US", {timeZone: "America/Chicago"}));
        const hours = centralTime.getHours();
        return hours >= 19 || hours < 7; // 7pm to 7am CST
      }

      function initAfterHoursDetection() {
        const updateAfterHoursStatus = () => {
          const afterHours = isAfterHours();
          document.body.classList.toggle('after-hours', afterHours);
          
          // Update all emergency CTAs
          const emergencyElements = document.querySelectorAll('[data-emergency-cta]');
          emergencyElements.forEach(element => {
            if (afterHours) {
              const badge = element.querySelector('.after-hours-badge');
              if (!badge && element instanceof HTMLElement) {
                const span = document.createElement('span');
                span.className = 'after-hours-badge inline-block ml-2 px-2 py-1 text-xs bg-yellow-100 text-yellow-800 rounded-full font-semibold';
                span.textContent = '+$250 after 7pm';
                element.appendChild(span);
              }
            } else {
              const badge = element.querySelector('.after-hours-badge');
              if (badge) badge.remove();
            }
          });
        };
        
        updateAfterHoursStatus();
        setInterval(updateAfterHoursStatus, 60000); // Check every minute
        
        // Update when user returns to tab
        document.addEventListener('visibilitychange', () => {
          if (!document.hidden) updateAfterHoursStatus();
        });
      }

      // Initialize when page loads
      document.addEventListener('DOMContentLoaded', initAfterHoursDetection);
    </script>

    <!-- Enhanced Analytics Tracking -->
    <script>
      // Initialize enhanced analytics tracking after page load
      document.addEventListener('DOMContentLoaded', function() {
        // Track page view with context
        if (typeof gtag !== 'undefined') {
          gtag('event', 'page_view', {
            page_title: document.title,
            page_location: window.location.href,
            city: document.body.dataset.city || undefined,
            service: document.body.dataset.service || undefined
          });
        }

        // Track phone number clicks
        document.addEventListener('click', function(event) {
          const target = event.target.closest('a[href^="tel:"]');
          if (target) {
            const phoneNumber = target.href.replace('tel:', '');
            const context = target.closest('header') ? 'header' : 
                          target.closest('footer') ? 'footer' : 
                          target.closest('.btn-emergency, .emergency') ? 'emergency' : 'content';
            
            if (typeof gtag !== 'undefined') {
              gtag('event', 'phone_call', {
                event_category: 'engagement',
                event_label: context,
                phone_number: phoneNumber,
                page_location: window.location.href
              });
            }
          }
        });

        // Track form submissions
        document.addEventListener('submit', function(event) {
          const form = event.target;
          if (form.tagName === 'FORM') {
            const formType = form.dataset.formType || 'contact';
            const emergency = form.querySelector('input[name="emergency"]')?.checked || false;
            
            if (typeof gtag !== 'undefined') {
              gtag('event', 'form_submission', {
                event_category: 'conversion',
                form_type: formType,
                emergency: emergency,
                page_location: window.location.href
              });
            }
          }
        });

        // Track CTA button clicks
        document.addEventListener('click', function(event) {
          const button = event.target.closest('.btn-primary, .btn-emergency, .btn-secondary, button[data-track]');
          if (button) {
            const buttonText = button.textContent?.trim() || 'Unknown';
            const buttonType = button.className.includes('emergency') ? 'emergency' : 
                              button.className.includes('primary') ? 'primary' : 'secondary';
            
            if (typeof gtag !== 'undefined') {
              gtag('event', 'cta_click', {
                event_category: 'conversion',
                event_label: buttonText,
                button_type: buttonType,
                page_location: window.location.href
              });
            }
          }
        });

        // Track scroll depth
        let scrollDepths = [25, 50, 75, 90];
        let trackedDepths = [];
        
        function trackScrollDepth() {
          const scrollTop = window.pageYOffset || document.documentElement.scrollTop;
          const documentHeight = document.documentElement.scrollHeight;
          const windowHeight = window.innerHeight;
          const scrollPercent = Math.round((scrollTop / (documentHeight - windowHeight)) * 100);
          
          scrollDepths.forEach(depth => {
            if (scrollPercent >= depth && !trackedDepths.includes(depth)) {
              trackedDepths.push(depth);
              if (typeof gtag !== 'undefined') {
                gtag('event', 'scroll', {
                  event_category: 'engagement',
                  event_label: depth + '%',
                  value: depth
                });
              }
            }
          });
        }

        let throttleTimer = null;
        window.addEventListener('scroll', function() {
          if (throttleTimer) return;
          throttleTimer = setTimeout(function() {
            trackScrollDepth();
            throttleTimer = null;
          }, 500);
        });
      });
    </script>
  </body>
</html>
