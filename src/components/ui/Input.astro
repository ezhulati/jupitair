---
export interface Props {
  type?: 'text' | 'email' | 'tel' | 'password' | 'number' | 'url' | 'search' | 'date' | 'time';
  name: string;
  id?: string;
  label: string;
  placeholder?: string;
  value?: string;
  required?: boolean;
  disabled?: boolean;
  readonly?: boolean;
  autocomplete?: string;
  pattern?: string;
  minlength?: number;
  maxlength?: number;
  min?: string | number;
  max?: string | number;
  step?: string | number;
  size?: 'sm' | 'md' | 'lg';
  variant?: 'default' | 'error' | 'success';
  helpText?: string;
  errorMessage?: string;
  class?: string;
  labelClass?: string;
  inputClass?: string;
  showLabel?: boolean;
}

const {
  type = 'text',
  name,
  id = name,
  label,
  placeholder,
  value,
  required = false,
  disabled = false,
  readonly = false,
  autocomplete,
  pattern,
  minlength,
  maxlength,
  min,
  max,
  step,
  size = 'md',
  variant = 'default',
  helpText,
  errorMessage,
  class: className = '',
  labelClass = '',
  inputClass = '',
  showLabel = true,
} = Astro.props;

// Size classes
const sizeClasses = {
  sm: 'px-3 py-2 text-sm min-h-[40px]',
  md: 'px-4 py-3 text-base min-h-[44px]',
  lg: 'px-5 py-4 text-lg min-h-[48px]'
};

// Variant classes
const variantClasses = {
  default: `
    border-gray-200 focus:border-primary-500 focus:ring-primary-100
    hover:border-gray-300
  `,
  error: `
    border-red-300 bg-red-50 focus:border-red-500 focus:ring-red-100
    hover:border-red-400
  `,
  success: `
    border-green-300 bg-green-50 focus:border-green-500 focus:ring-green-100
    hover:border-green-400
  `
};

// Base input classes
const baseInputClasses = `
  w-full bg-white border-2 rounded-xl
  text-gray-900 placeholder-gray-500
  transition-all duration-200 ease-in-out
  focus:outline-none focus:ring-2
  disabled:bg-gray-100 disabled:text-gray-500 disabled:cursor-not-allowed
  readonly:bg-gray-50 readonly:cursor-default
`;

const inputClasses = [
  baseInputClasses,
  sizeClasses[size],
  variantClasses[variant],
  inputClass,
].join(' ').replace(/\s+/g, ' ').trim();

// Label classes
const baseLabelClasses = `
  block font-semibold text-gray-900 mb-2 leading-tight
`;

const labelSizeClasses = {
  sm: 'text-xs',
  md: 'text-sm',
  lg: 'text-base'
};

const finalLabelClasses = [
  baseLabelClasses,
  labelSizeClasses[size],
  labelClass,
].join(' ').replace(/\s+/g, ' ').trim();

// Generate input props
const inputProps = {
  type,
  name,
  id,
  placeholder,
  value,
  required,
  disabled,
  readonly,
  autocomplete,
  pattern,
  minlength,
  maxlength,
  min,
  max,
  step,
  'aria-invalid': variant === 'error' ? 'true' : 'false',
  'aria-describedby': [
    helpText ? `${id}-help` : '',
    errorMessage ? `${id}-error` : ''
  ].filter(Boolean).join(' ') || undefined,
};

// Mobile optimization for specific input types
const mobileOptimizations = type === 'email' || type === 'tel' || type === 'number' 
  ? { inputmode: type === 'tel' ? 'tel' : type === 'email' ? 'email' : 'numeric' }
  : {};
---

<div class={`form-group space-y-2 ${className}`}>
  {showLabel && (
    <label for={id} class={finalLabelClasses}>
      {label}
      {required && (
        <span class="text-red-600 ml-1" aria-label="required">*</span>
      )}
    </label>
  )}
  
  <input
    class={inputClasses}
    {...inputProps}
    {...mobileOptimizations}
  />
  
  {helpText && (
    <div id={`${id}-help`} class="text-xs text-gray-600 mt-1">
      {helpText}
    </div>
  )}
  
  {errorMessage && (
    <div 
      id={`${id}-error`} 
      class="text-sm text-red-600 font-medium mt-1" 
      role="alert" 
      aria-live="polite"
    >
      {errorMessage}
    </div>
  )}
</div>

<style>
  /* iOS zoom prevention */
  input {
    font-size: 16px !important;
  }
  
  @media (min-width: 640px) {
    input {
      font-size: inherit;
    }
  }

  /* High contrast mode support */
  @media (prefers-contrast: high) {
    input {
      border-width: 3px !important;
    }
  }

  /* Forced colors mode */
  @media (forced-colors: active) {
    input {
      border: 2px solid ButtonText !important;
      background: Field !important;
      color: FieldText !important;
    }
    
    input:focus {
      border: 2px solid Highlight !important;
      background: Field !important;
    }
    
    input:disabled {
      border: 2px solid GrayText !important;
      background: ButtonFace !important;
      color: GrayText !important;
    }
  }

  /* Remove iOS input styling */
  input {
    -webkit-appearance: none;
    -moz-appearance: none;
    appearance: none;
  }

  /* Custom date input styling */
  input[type="date"]::-webkit-calendar-picker-indicator {
    color: rgba(0, 0, 0, 0);
    opacity: 1;
    display: block;
    background: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 20 20'%3e%3cpath stroke='%236b7280' stroke-linecap='round' stroke-linejoin='round' stroke-width='1.5' d='M6 2v3m4-3v3m4-3v3M4 9h12M5 4h10a1 1 0 011 1v10a1 1 0 01-1 1H5a1 1 0 01-1-1V5a1 1 0 011-1z'/%3e%3c/svg%3e") no-repeat;
    background-size: 1.25em 1.25em;
    background-position: center;
    width: 1.25em;
    height: 1.25em;
  }

  /* Custom time input styling */
  input[type="time"]::-webkit-calendar-picker-indicator {
    color: rgba(0, 0, 0, 0);
    opacity: 1;
    display: block;
    background: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 20 20'%3e%3cpath stroke='%236b7280' stroke-linecap='round' stroke-linejoin='round' stroke-width='1.5' d='M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z'/%3e%3c/svg%3e") no-repeat;
    background-size: 1.25em 1.25em;
    background-position: center;
    width: 1.25em;
    height: 1.25em;
  }
</style>