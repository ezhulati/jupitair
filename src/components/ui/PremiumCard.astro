---
export interface Props {
  variant?: 'default' | 'elevated' | 'glass' | 'gradient' | 'interactive' | 'premium';
  padding?: 'none' | 'sm' | 'md' | 'lg' | 'xl';
  hover?: boolean;
  glow?: boolean;
  class?: string;
  id?: string;
  dataTracking?: string;
}

const {
  variant = 'default',
  padding = 'md',
  hover = true,
  glow = false,
  class: className = '',
  id,
  dataTracking,
} = Astro.props;

const baseClasses = `
  premium-card
  relative
  rounded-2xl
  transition-all duration-300 ease-out
  transform-gpu will-change-transform
  overflow-hidden
`;

const variantClasses = {
  default: `
    bg-white
    border border-gray-200
    shadow-sm
    ${hover ? 'hover:shadow-lg hover:-translate-y-1' : ''}
  `,
  elevated: `
    bg-white
    shadow-xl shadow-gray-900/10
    ${hover ? 'hover:shadow-2xl hover:-translate-y-2' : ''}
  `,
  glass: `
    bg-white/80
    backdrop-blur-xl backdrop-saturate-150
    border border-white/20
    shadow-xl shadow-gray-900/10
    ${hover ? 'hover:bg-white/90 hover:shadow-2xl hover:-translate-y-1' : ''}
  `,
  gradient: `
    bg-gradient-to-br from-white via-gray-50 to-gray-100
    border border-gray-200/50
    shadow-xl shadow-gray-900/10
    ${hover ? 'hover:shadow-2xl hover:-translate-y-1' : ''}
  `,
  interactive: `
    bg-white
    border-2 border-transparent
    shadow-lg shadow-gray-900/10
    hover:border-blue-500
    ${hover ? 'hover:shadow-2xl hover:shadow-blue-500/20 hover:-translate-y-1' : ''}
  `,
  premium: `
    bg-gradient-to-br from-gray-900 via-gray-800 to-gray-900
    dark:from-gray-950 dark:via-gray-900 dark:to-gray-950
    text-white
    border border-gray-700/50
    shadow-2xl shadow-gray-900/30
    before:absolute before:inset-0 before:bg-gradient-to-br 
    before:from-blue-600/10 before:via-transparent before:to-purple-600/10
    before:opacity-0 before:transition-opacity before:duration-500
    hover:before:opacity-100
    ${hover ? 'hover:shadow-3xl hover:shadow-blue-500/20 hover:-translate-y-2 hover:scale-[1.02]' : ''}
  `,
};

const paddingClasses = {
  none: '',
  sm: 'p-4',
  md: 'p-6',
  lg: 'p-8',
  xl: 'p-10',
};

const glowClass = glow ? 'glow-effect' : '';

const classes = [
  baseClasses,
  variantClasses[variant],
  paddingClasses[padding],
  glowClass,
  className,
].join(' ');
---

<div
  class={classes}
  id={id}
  data-tracking={dataTracking}
  data-variant={variant}
>
  {/* Noise Texture Overlay */}
  <div class="noise-overlay absolute inset-0 opacity-[0.015] pointer-events-none mix-blend-soft-light"></div>
  
  {/* Gradient Mesh Background (for premium variant) */}
  {variant === 'premium' && (
    <div class="absolute inset-0 opacity-30">
      <div class="absolute top-0 left-0 w-96 h-96 bg-blue-500 rounded-full filter blur-[128px]"></div>
      <div class="absolute bottom-0 right-0 w-96 h-96 bg-purple-500 rounded-full filter blur-[128px]"></div>
    </div>
  )}

  {/* Animated Border Gradient */}
  {(variant === 'interactive' || variant === 'premium') && (
    <div class="animated-border absolute inset-0 rounded-2xl"></div>
  )}

  {/* Corner Accents (for premium variant) */}
  {variant === 'premium' && (
    <>
      <div class="absolute top-0 left-0 w-20 h-20">
        <svg class="w-full h-full text-blue-500/20" viewBox="0 0 80 80">
          <path d="M0,0 L80,0 L0,80 Z" fill="currentColor" />
        </svg>
      </div>
      <div class="absolute bottom-0 right-0 w-20 h-20 rotate-180">
        <svg class="w-full h-full text-purple-500/20" viewBox="0 0 80 80">
          <path d="M0,0 L80,0 L0,80 Z" fill="currentColor" />
        </svg>
      </div>
    </>
  )}

  {/* Content Container */}
  <div class="relative z-10">
    <slot />
  </div>

  {/* Hover Shine Effect */}
  <div class="shine-effect absolute inset-0 -top-[100%] bg-gradient-to-b from-white/20 via-white/10 to-transparent opacity-0 transition-all duration-700 pointer-events-none"></div>
</div>

<style>
  .noise-overlay {
    background-image: url("data:image/svg+xml,%3Csvg viewBox='0 0 256 256' xmlns='http://www.w3.org/2000/svg'%3E%3Cfilter id='noiseFilter'%3E%3CfeTurbulence type='fractalNoise' baseFrequency='0.65' numOctaves='3' stitchTiles='stitch'/%3E%3C/filter%3E%3Crect width='100%25' height='100%25' filter='url(%23noiseFilter)'/%3E%3C/svg%3E");
  }

  @keyframes glow {
    0%, 100% {
      box-shadow: 
        0 0 20px rgba(59, 130, 246, 0.5),
        0 0 40px rgba(59, 130, 246, 0.3),
        0 0 60px rgba(59, 130, 246, 0.1);
    }
    50% {
      box-shadow: 
        0 0 30px rgba(59, 130, 246, 0.6),
        0 0 50px rgba(59, 130, 246, 0.4),
        0 0 70px rgba(59, 130, 246, 0.2);
    }
  }

  .glow-effect {
    animation: glow 3s ease-in-out infinite;
  }

  @keyframes border-animation {
    0% {
      background-position: 0% 50%;
    }
    50% {
      background-position: 100% 50%;
    }
    100% {
      background-position: 0% 50%;
    }
  }

  .animated-border {
    background: linear-gradient(
      60deg,
      transparent,
      rgba(59, 130, 246, 0.3),
      transparent,
      rgba(147, 51, 234, 0.3),
      transparent
    );
    background-size: 300% 300%;
    animation: border-animation 4s ease infinite;
    padding: 2px;
    -webkit-mask: 
      linear-gradient(#fff 0 0) content-box, 
      linear-gradient(#fff 0 0);
    -webkit-mask-composite: exclude;
    mask-composite: exclude;
    pointer-events: none;
  }

  .premium-card:hover .shine-effect {
    opacity: 1;
    transform: translateY(100%);
  }

  /* Parallax effect on mouse move */
  .premium-card[data-variant="premium"] {
    transform-style: preserve-3d;
    perspective: 1000px;
  }

  /* Glass morphism enhancements (NOT USED - all glass cards converted to elevated) */
  /* REMOVED: glass styling to eliminate contrast issues */

  /* Performance optimizations */
  .premium-card {
    contain: layout style;
  }

  /* Smooth rendering on Safari */
  @supports (-webkit-touch-callout: none) {
    .premium-card {
      -webkit-transform: translateZ(0);
      -webkit-backface-visibility: hidden;
    }
  }
</style>

<script>
  // Parallax tilt effect for premium cards
  document.addEventListener('DOMContentLoaded', () => {
    const premiumCards = document.querySelectorAll('.premium-card[data-variant="premium"], .premium-card[data-variant="interactive"]');
    
    premiumCards.forEach((card) => {
      let bounds;

      function rotateToMouse(e) {
        const mouseX = e.clientX;
        const mouseY = e.clientY;
        const leftX = mouseX - bounds.x;
        const topY = mouseY - bounds.y;
        const center = {
          x: leftX - bounds.width / 2,
          y: topY - bounds.height / 2
        };
        const distance = Math.sqrt(center.x ** 2 + center.y ** 2);

        card.style.transform = `
          perspective(1000px)
          rotateX(${center.y / 20}deg)
          rotateY(${-center.x / 20}deg)
          scale3d(1.02, 1.02, 1.02)
        `;
        
        card.querySelector('.shine-effect').style.background = `
          radial-gradient(
            circle at ${leftX}px ${topY}px,
            rgba(255, 255, 255, 0.2),
            transparent 50%
          )
        `;
      }

      card.addEventListener('mouseenter', (e) => {
        bounds = card.getBoundingClientRect();
        document.addEventListener('mousemove', rotateToMouse);
      });

      card.addEventListener('mouseleave', () => {
        document.removeEventListener('mousemove', rotateToMouse);
        card.style.transform = '';
        card.querySelector('.shine-effect').style.background = '';
      });
    });
  });

  // Intersection Observer for animation on scroll
  const observerOptions = {
    threshold: 0.1,
    rootMargin: '50px'
  };

  const cardObserver = new IntersectionObserver((entries) => {
    entries.forEach((entry) => {
      if (entry.isIntersecting) {
        entry.target.style.opacity = '1';
        entry.target.style.transform = 'translateY(0)';
      }
    });
  }, observerOptions);

  document.querySelectorAll('.premium-card').forEach((card) => {
    card.style.opacity = '0';
    card.style.transform = 'translateY(20px)';
    card.style.transition = 'opacity 0.6s ease, transform 0.6s ease';
    cardObserver.observe(card);
  });
</script>