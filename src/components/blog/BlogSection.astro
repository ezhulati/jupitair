---
export interface Props {
  title: string;
  level?: 'h2' | 'h3' | 'h4';
  id?: string;
  class?: string;
}

const { 
  title, 
  level = 'h2',
  id,
  class: className = ''
} = Astro.props;

const HeadingTag = level;

// Generate ID from title if not provided
const headingId = id || title.toLowerCase().replace(/[^a-z0-9]+/g, '-').replace(/(^-|-$)/g, '');

// Responsive heading classes based on level
const headingClasses = {
  h2: 'text-2xl sm:text-3xl font-bold text-gray-900 mt-12 mb-6',
  h3: 'text-xl sm:text-2xl font-semibold text-gray-800 mt-8 mb-4', 
  h4: 'text-lg sm:text-xl font-medium text-gray-700 mt-6 mb-3'
};
---

<HeadingTag id={headingId} class={`${headingClasses[level]} ${className}`}>
  {title}
</HeadingTag>
<div class="prose-content">
  <slot />
</div>

<style>
  /* Mobile-first typography */
  .prose-content {
    @apply text-base sm:text-lg text-gray-700 leading-relaxed;
  }
  
  .prose-content :global(ul),
  .prose-content :global(ol) {
    @apply my-4 pl-6 space-y-2;
  }
  
  .prose-content :global(li) {
    @apply text-gray-700;
  }
  
  .prose-content :global(p) {
    @apply mb-4;
  }
  
  .prose-content :global(strong) {
    @apply font-semibold text-gray-900;
  }
  
  .prose-content :global(a) {
    @apply text-blue-600 underline hover:text-blue-700;
  }
  
  /* Better mobile spacing */
  @media (max-width: 640px) {
    h2 {
      @apply mt-8 mb-4;
    }
    
    h3 {
      @apply mt-6 mb-3;
    }
    
    h4 {
      @apply mt-4 mb-2;
    }
  }
</style>